
  0%|          | 0/20 [00:00<?, ?it/s]
Sequential(
  (base_model): DenseNet(
    (features): Sequential(
      (conv0): Conv2d(3, 64, kernel_size=(7, 7), stride=(2, 2), padding=(3, 3), bias=False)
      (norm0): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (relu0): ReLU(inplace=True)
      (pool0): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)
      (denseblock1): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(64, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(96, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition1): _Transition(
        (norm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock2): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(128, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(160, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(160, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(192, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(224, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(224, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition2): _Transition(
        (norm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock3): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(288, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(288, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(320, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(352, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(352, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(384, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(416, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(416, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(448, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(448, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(480, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(544, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(544, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(576, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(576, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(608, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(608, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(640, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(640, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(672, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(704, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(704, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(736, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(736, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer17): _DenseLayer(
          (norm1): BatchNorm2d(768, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer18): _DenseLayer(
          (norm1): BatchNorm2d(800, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(800, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer19): _DenseLayer(
          (norm1): BatchNorm2d(832, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(832, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer20): _DenseLayer(
          (norm1): BatchNorm2d(864, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(864, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer21): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer22): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer23): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer24): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer25): _DenseLayer(
          (norm1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer26): _DenseLayer(
          (norm1): BatchNorm2d(1056, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1056, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer27): _DenseLayer(
          (norm1): BatchNorm2d(1088, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1088, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer28): _DenseLayer(
          (norm1): BatchNorm2d(1120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1120, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer29): _DenseLayer(
          (norm1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1152, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer30): _DenseLayer(
          (norm1): BatchNorm2d(1184, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1184, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer31): _DenseLayer(
          (norm1): BatchNorm2d(1216, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1216, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer32): _DenseLayer(
          (norm1): BatchNorm2d(1248, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1248, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer33): _DenseLayer(
          (norm1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1280, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer34): _DenseLayer(
          (norm1): BatchNorm2d(1312, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1312, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer35): _DenseLayer(
          (norm1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1344, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer36): _DenseLayer(
          (norm1): BatchNorm2d(1376, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1376, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer37): _DenseLayer(
          (norm1): BatchNorm2d(1408, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1408, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer38): _DenseLayer(
          (norm1): BatchNorm2d(1440, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1440, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer39): _DenseLayer(
          (norm1): BatchNorm2d(1472, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1472, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer40): _DenseLayer(
          (norm1): BatchNorm2d(1504, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1504, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer41): _DenseLayer(
          (norm1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1536, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer42): _DenseLayer(
          (norm1): BatchNorm2d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1568, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer43): _DenseLayer(
          (norm1): BatchNorm2d(1600, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1600, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer44): _DenseLayer(
          (norm1): BatchNorm2d(1632, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1632, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer45): _DenseLayer(
          (norm1): BatchNorm2d(1664, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1664, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer46): _DenseLayer(
          (norm1): BatchNorm2d(1696, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1696, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer47): _DenseLayer(
          (norm1): BatchNorm2d(1728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1728, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer48): _DenseLayer(
          (norm1): BatchNorm2d(1760, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1760, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (transition3): _Transition(
        (norm): BatchNorm2d(1792, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
        (relu): ReLU(inplace=True)
        (conv): Conv2d(1792, 896, kernel_size=(1, 1), stride=(1, 1), bias=False)
        (pool): AvgPool2d(kernel_size=2, stride=2, padding=0)
      )
      (denseblock4): _DenseBlock(
        (denselayer1): _DenseLayer(
          (norm1): BatchNorm2d(896, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(896, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer2): _DenseLayer(
          (norm1): BatchNorm2d(928, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(928, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer3): _DenseLayer(
          (norm1): BatchNorm2d(960, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(960, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer4): _DenseLayer(
          (norm1): BatchNorm2d(992, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(992, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer5): _DenseLayer(
          (norm1): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1024, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer6): _DenseLayer(
          (norm1): BatchNorm2d(1056, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1056, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer7): _DenseLayer(
          (norm1): BatchNorm2d(1088, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1088, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer8): _DenseLayer(
          (norm1): BatchNorm2d(1120, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1120, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer9): _DenseLayer(
          (norm1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1152, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer10): _DenseLayer(
          (norm1): BatchNorm2d(1184, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1184, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer11): _DenseLayer(
          (norm1): BatchNorm2d(1216, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1216, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer12): _DenseLayer(
          (norm1): BatchNorm2d(1248, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1248, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer13): _DenseLayer(
          (norm1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1280, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer14): _DenseLayer(
          (norm1): BatchNorm2d(1312, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1312, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer15): _DenseLayer(
          (norm1): BatchNorm2d(1344, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1344, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer16): _DenseLayer(
          (norm1): BatchNorm2d(1376, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1376, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer17): _DenseLayer(
          (norm1): BatchNorm2d(1408, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1408, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer18): _DenseLayer(
          (norm1): BatchNorm2d(1440, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1440, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer19): _DenseLayer(
          (norm1): BatchNorm2d(1472, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1472, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer20): _DenseLayer(
          (norm1): BatchNorm2d(1504, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1504, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer21): _DenseLayer(
          (norm1): BatchNorm2d(1536, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1536, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer22): _DenseLayer(
          (norm1): BatchNorm2d(1568, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1568, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer23): _DenseLayer(
          (norm1): BatchNorm2d(1600, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1600, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer24): _DenseLayer(
          (norm1): BatchNorm2d(1632, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1632, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer25): _DenseLayer(
          (norm1): BatchNorm2d(1664, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1664, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer26): _DenseLayer(
          (norm1): BatchNorm2d(1696, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1696, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer27): _DenseLayer(
          (norm1): BatchNorm2d(1728, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1728, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer28): _DenseLayer(
          (norm1): BatchNorm2d(1760, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1760, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer29): _DenseLayer(
          (norm1): BatchNorm2d(1792, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1792, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer30): _DenseLayer(
          (norm1): BatchNorm2d(1824, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1824, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer31): _DenseLayer(
          (norm1): BatchNorm2d(1856, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1856, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
        (denselayer32): _DenseLayer(
          (norm1): BatchNorm2d(1888, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu1): ReLU(inplace=True)
          (conv1): Conv2d(1888, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
          (norm2): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (relu2): ReLU(inplace=True)
          (conv2): Conv2d(128, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
        )
      )
      (norm5): BatchNorm2d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
    )
    (classifier): Identity()
  )
  (classifier): Sequential(
    (0): Dropout(p=0.5, inplace=False)
    (1): Linear(in_features=1920, out_features=5, bias=True)
  )
)
Training....
TARGET:  tensor([4, 1, 3, 0, 1, 0, 4, 1, 3, 0, 1, 1, 4, 0, 4, 2, 1, 1, 3, 4, 1, 0, 2, 1,
        3, 0, 1, 0, 0, 0, 0, 2])
OUTPUT:  tensor([3, 3, 3, 0, 1, 0, 4, 3, 3, 0, 4, 4, 2, 0, 4, 2, 1, 1, 3, 2, 1, 0, 2, 1,
        3, 4, 1, 1, 0, 0, 0, 2])
Accuracy after  50 steps:  0.7125
Precision, recall =  tensor(0.6857) tensor(0.7600)
TARGET:  tensor([0, 3, 1, 3, 0, 0, 1, 1, 0, 3, 4, 1, 4, 1, 0, 2, 4, 1, 4, 4, 4, 4, 4, 0,
        3, 1, 4, 4, 4, 1, 4, 1])
OUTPUT:  tensor([0, 1, 1, 1, 0, 0, 1, 3, 0, 3, 4, 1, 4, 1, 0, 3, 3, 3, 3, 4, 4, 3, 4, 3,
        3, 1, 4, 3, 4, 1, 4, 1])
Accuracy after  100 steps:  0.7359375
Precision, recall =  tensor(0.5956) tensor(0.5556)
Epoch:  0 Loss:  2.489750916670476  Accuracy:  78.96875 Matthews corr.coef:  tensor(0.7068) Cohen Kappa metric on train tensor(0.6864)
  0%|          | 0/20 [00:00<?, ?it/s]C:\Users\USER\AppData\Local\Temp\ipykernel_3124\3234579611.py:77: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  op = F.softmax(inception.forward(inp))
Validation accuracy:  0.19196428571428573
  5%|▌         | 1/20 [09:52<3:07:34, 592.36s/it]
Training....
TARGET:  tensor([2, 4, 1, 1, 3, 2, 4, 4, 2, 2, 4, 2, 1, 4, 1, 3, 0, 1, 1, 3, 0, 1, 1, 4,
        0, 0, 4, 0, 1, 0, 2, 4])
OUTPUT:  tensor([0, 4, 1, 0, 3, 2, 4, 4, 2, 2, 4, 2, 1, 4, 1, 3, 0, 1, 1, 3, 0, 1, 1, 4,
        0, 0, 4, 0, 1, 2, 4, 4])
Accuracy after  50 steps:  0.8125
Precision, recall =  tensor(0.8806) tensor(0.8778)
TARGET:  tensor([1, 1, 1, 0, 3, 0, 3, 1, 0, 1, 0, 4, 4, 1, 1, 3, 1, 3, 1, 3, 2, 4, 3, 4,
        2, 4, 4, 2, 1, 4, 1, 4])
OUTPUT:  tensor([1, 1, 1, 0, 3, 0, 3, 1, 0, 3, 4, 2, 4, 1, 1, 3, 1, 3, 0, 3, 1, 2, 3, 2,
        2, 4, 4, 2, 1, 4, 0, 2])
Accuracy after  100 steps:  0.8009375
Precision, recall =  tensor(0.6959) tensor(0.7288)
Epoch:  1 Loss:  2.058898802381009  Accuracy:  85.625 Matthews corr.coef:  tensor(0.6880) Cohen Kappa metric on train tensor(0.6787)
Validating.....
Validation accuracy:  0.20758928571428573

 10%|█         | 2/20 [19:45<2:57:47, 592.65s/it]
TARGET:  tensor([0, 2, 3, 1, 2, 0, 0, 1, 0, 3, 3, 3, 1, 3, 3, 1, 1, 1, 1, 3, 2, 3, 4, 2,
        1, 1, 1, 2, 1, 2, 2, 4])
OUTPUT:  tensor([0, 2, 3, 1, 4, 0, 0, 3, 0, 3, 3, 4, 1, 3, 4, 1, 3, 0, 1, 3, 2, 3, 4, 2,
        1, 1, 1, 2, 1, 2, 2, 4])
Accuracy after  50 steps:  0.82125
Precision, recall =  tensor(0.7900) tensor(0.8669)
TARGET:  tensor([1, 3, 1, 1, 1, 1, 3, 4, 4, 4, 3, 0, 3, 1, 4, 0, 3, 1, 2, 2, 0, 1, 3, 0,
        2, 0, 0, 2, 4, 1, 1, 4])
OUTPUT:  tensor([1, 3, 1, 1, 1, 1, 3, 4, 4, 4, 3, 0, 3, 1, 4, 0, 1, 1, 2, 1, 0, 1, 3, 4,
        2, 0, 0, 4, 2, 1, 1, 4])
Accuracy after  100 steps:  0.8034375
Precision, recall =  tensor(0.8429) tensor(0.8000)
Epoch:  2 Loss:  2.221136479239379  Accuracy:  85.84375 Matthews corr.coef:  tensor(0.7001) Cohen Kappa metric on train tensor(0.6792)
Validating.....
Validation accuracy:  0.19866071428571427

 15%|█▌        | 3/20 [29:38<2:47:57, 592.81s/it]
TARGET:  tensor([2, 4, 3, 4, 1, 1, 4, 1, 4, 3, 1, 4, 2, 3, 3, 1, 1, 2, 1, 4, 3, 3, 3, 0,
        1, 0, 0, 2, 2, 1, 2, 3])
OUTPUT:  tensor([4, 4, 0, 4, 1, 1, 4, 1, 4, 3, 1, 4, 4, 4, 3, 4, 0, 4, 1, 4, 0, 4, 4, 0,
        1, 0, 0, 4, 4, 1, 2, 3])
Accuracy after  50 steps:  0.8175
Precision, recall =  tensor(0.7800) tensor(0.6639)
TARGET:  tensor([4, 4, 2, 1, 1, 0, 0, 1, 0, 3, 1, 3, 0, 2, 2, 2, 4, 4, 1, 1, 1, 2, 0, 4,
        3, 2, 1, 3, 1, 3, 4, 0])
OUTPUT:  tensor([4, 3, 2, 1, 3, 0, 0, 1, 0, 3, 1, 3, 0, 2, 2, 2, 4, 4, 1, 1, 1, 2, 0, 4,
        2, 2, 1, 3, 1, 3, 3, 3])
Accuracy after  100 steps:  0.81375
Precision, recall =  tensor(0.8714) tensor(0.8378)
Epoch:  3 Loss:  2.084599486419133  Accuracy:  87.25 Matthews corr.coef:  tensor(0.6981) Cohen Kappa metric on train tensor(0.6797)
Validating.....
Validation accuracy:  0.23102678571428573

 20%|██        | 4/20 [39:30<2:38:03, 592.74s/it]
TARGET:  tensor([4, 1, 2, 1, 1, 0, 2, 2, 4, 0, 1, 4, 2, 3, 0, 2, 2, 3, 2, 1, 1, 3, 0, 4,
        3, 2, 1, 4, 2, 0, 0, 0])
OUTPUT:  tensor([4, 1, 2, 3, 1, 0, 2, 3, 4, 0, 1, 3, 2, 3, 0, 4, 2, 3, 2, 1, 1, 1, 0, 4,
        3, 2, 1, 4, 2, 4, 1, 0])
Accuracy after  50 steps:  0.824375
Precision, recall =  tensor(0.7833) tensor(0.7798)
TARGET:  tensor([2, 0, 4, 2, 4, 0, 4, 0, 0, 4, 1, 3, 2, 2, 4, 1, 1, 4, 0, 0, 0, 3, 0, 3,
        4, 3, 3, 0, 3, 0, 3, 0])
OUTPUT:  tensor([4, 0, 4, 2, 4, 0, 4, 0, 0, 4, 1, 3, 4, 2, 4, 1, 1, 4, 0, 3, 1, 3, 1, 3,
        4, 3, 3, 0, 1, 0, 3, 0])
Accuracy after  100 steps:  0.8215625
Precision, recall =  tensor(0.8270) tensor(0.8169)
Epoch:  4 Loss:  2.135093491590981  Accuracy:  87.54017857142857 Matthews corr.coef:  tensor(0.7805) Cohen Kappa metric on train tensor(0.7742)
Validating.....

 25%|██▌       | 5/20 [49:22<2:28:05, 592.37s/it]
Training....
TARGET:  tensor([0, 0, 4, 1, 1, 0, 1, 1, 4, 0, 3, 1, 3, 3, 1, 0, 1, 4, 1, 0, 1, 3, 1, 1,
        2, 2, 1, 3, 2, 1, 3, 0])
OUTPUT:  tensor([4, 0, 0, 1, 3, 0, 1, 1, 2, 0, 3, 2, 3, 1, 1, 0, 2, 2, 1, 0, 1, 2, 1, 4,
        2, 2, 1, 2, 2, 1, 3, 2])
Accuracy after  50 steps:  0.82125
Precision, recall =  tensor(0.5567) tensor(0.5813)
TARGET:  tensor([1, 1, 1, 1, 1, 4, 0, 2, 1, 1, 1, 2, 3, 2, 2, 3, 2, 4, 1, 0, 1, 0, 1, 2,
        4, 2, 4, 2, 3, 3, 2, 1])
OUTPUT:  tensor([3, 1, 3, 1, 1, 4, 0, 2, 1, 3, 1, 4, 3, 0, 2, 3, 4, 4, 1, 0, 1, 0, 1, 4,
        4, 2, 4, 4, 3, 3, 4, 1])
Accuracy after  100 steps:  0.815
Precision, recall =  tensor(0.7532) tensor(0.8167)
Epoch:  5 Loss:  2.1472334597658898  Accuracy:  87.12053571428571 Matthews corr.coef:  tensor(0.6557) Cohen Kappa metric on train tensor(0.6387)
Validating.....

 30%|███       | 6/20 [59:14<2:18:10, 592.17s/it]
Training....
TARGET:  tensor([1, 4, 2, 4, 0, 4, 4, 1, 4, 2, 2, 2, 0, 2, 1, 0, 4, 0, 0, 0, 4, 4, 3, 1,
        0, 2, 1, 4, 4, 2, 3, 1])
OUTPUT:  tensor([1, 4, 2, 4, 0, 4, 4, 1, 4, 2, 2, 2, 0, 3, 1, 1, 4, 0, 0, 0, 4, 4, 3, 1,
        0, 2, 1, 4, 4, 3, 3, 1])
Accuracy after  50 steps:  0.83625
Precision, recall =  tensor(0.8714) tensor(0.9143)
TARGET:  tensor([0, 1, 2, 4, 1, 4, 1, 1, 2, 1, 2, 1, 4, 3, 4, 0, 2, 1, 1, 2, 1, 1, 3, 0,
        2, 2, 3, 0, 3, 1, 3, 2])
OUTPUT:  tensor([0, 1, 2, 4, 1, 4, 1, 1, 2, 1, 2, 1, 4, 3, 4, 0, 2, 1, 1, 2, 3, 1, 3, 2,
        3, 2, 3, 0, 1, 1, 3, 2])
Accuracy after  100 steps:  0.8325
Precision, recall =  tensor(0.8902) tensor(0.8668)
Epoch:  6 Loss:  1.9885577929671854  Accuracy:  88.64732142857143 Matthews corr.coef:  tensor(0.6023) Cohen Kappa metric on train tensor(0.5935)
Validating.....
Validation accuracy:  0.21763392857142858

 35%|███▌      | 7/20 [1:09:06<2:08:16, 592.07s/it]
TARGET:  tensor([0, 2, 1, 1, 1, 2, 0, 1, 3, 1, 3, 1, 0, 3, 3, 3, 1, 4, 4, 0, 3, 4, 0, 3,
        1, 1, 3, 0, 2, 0, 2, 1])
OUTPUT:  tensor([0, 2, 1, 1, 4, 2, 0, 1, 3, 1, 3, 1, 1, 2, 3, 3, 1, 4, 2, 0, 3, 4, 0, 3,
        0, 1, 3, 0, 2, 0, 2, 1])
Accuracy after  50 steps:  0.83875
Precision, recall =  tensor(0.8159) tensor(0.8398)
TARGET:  tensor([1, 0, 2, 0, 2, 2, 3, 3, 4, 3, 2, 4, 2, 1, 1, 4, 4, 0, 2, 3, 1, 1, 3, 2,
        0, 1, 3, 4, 2, 0, 2, 4])
OUTPUT:  tensor([1, 0, 2, 0, 2, 2, 3, 3, 4, 1, 2, 4, 2, 1, 1, 4, 4, 1, 2, 1, 1, 1, 1, 0,
        0, 1, 3, 4, 2, 0, 4, 4])
Accuracy after  100 steps:  0.8253125
Precision, recall =  tensor(0.8514) tensor(0.8156)
Epoch:  7 Loss:  2.1236913564082767  Accuracy:  88.07142857142857 Matthews corr.coef:  tensor(0.7910) Cohen Kappa metric on train tensor(0.7771)
Validating.....
Validation accuracy:  0.21651785714285715

 40%|████      | 8/20 [1:18:57<1:58:23, 591.92s/it]
TARGET:  tensor([2, 2, 2, 4, 2, 2, 0, 4, 1, 4, 2, 3, 0, 0, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1,
        1, 3, 2, 1, 3, 3, 3, 3])
OUTPUT:  tensor([4, 4, 2, 4, 4, 4, 0, 2, 1, 4, 4, 2, 0, 0, 2, 0, 1, 1, 3, 1, 1, 1, 0, 1,
        1, 4, 1, 1, 3, 3, 3, 3])
Accuracy after  50 steps:  0.835
Precision, recall =  tensor(0.7300) tensor(0.7262)
TARGET:  tensor([2, 1, 3, 1, 3, 0, 0, 4, 3, 1, 1, 2, 3, 2, 4, 3, 3, 0, 0, 0, 1, 2, 4, 4,
        1, 1, 4, 3, 0, 0, 4, 4])
OUTPUT:  tensor([2, 1, 3, 1, 3, 0, 0, 4, 3, 1, 1, 2, 3, 4, 4, 3, 3, 0, 0, 0, 1, 2, 4, 4,
        1, 1, 4, 3, 2, 0, 4, 4])
Accuracy after  100 steps:  0.8175
Precision, recall =  tensor(0.9250) tensor(0.9214)
Epoch:  8 Loss:  2.2502775556807006  Accuracy:  87.34821428571429 Matthews corr.coef:  tensor(0.7313) Cohen Kappa metric on train tensor(0.7241)
Validating.....

 45%|████▌     | 9/20 [1:28:49<1:48:30, 591.89s/it]
Training....
TARGET:  tensor([0, 2, 2, 3, 4, 2, 2, 2, 2, 3, 2, 1, 4, 4, 0, 4, 3, 0, 4, 1, 3, 2, 2, 2,
        0, 0, 1, 0, 0, 0, 3, 4])
OUTPUT:  tensor([0, 4, 2, 3, 1, 2, 2, 2, 3, 3, 2, 1, 4, 4, 0, 4, 1, 1, 4, 1, 3, 2, 2, 0,
        0, 0, 0, 0, 0, 2, 3, 4])
Accuracy after  50 steps:  0.8275
Precision, recall =  tensor(0.7317) tensor(0.7500)
TARGET:  tensor([1, 2, 2, 4, 2, 4, 2, 3, 3, 2, 1, 1, 4, 2, 2, 1, 4, 1, 4, 4, 0, 0, 0, 2,
        1, 4, 0, 3, 1, 4, 0, 2])
OUTPUT:  tensor([1, 2, 4, 4, 2, 4, 0, 1, 3, 2, 1, 1, 4, 2, 2, 1, 4, 1, 4, 4, 1, 0, 0, 2,
        1, 4, 0, 3, 1, 2, 0, 2])
Accuracy after  100 steps:  0.8303125
Precision, recall =  tensor(0.8656) tensor(0.8239)
Epoch:  9 Loss:  2.0777487974347815  Accuracy:  88.86607142857143 Matthews corr.coef:  tensor(0.9106) Cohen Kappa metric on train tensor(0.9076)
Validating.....
 45%|████▌     | 9/20 [1:28:49<1:48:30, 591.89s/it]C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:288: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if not torch.isfinite(tensor).all():
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:203: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmin = flat.min().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:204: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmax = flat.max().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:239: TracerWarning: Converting a tensor to a Python list might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  {name: wandb.Histogram(np_histogram=(tensor.tolist(), bins.tolist()))},
Training....
 50%|█████     | 10/20 [1:38:43<1:38:44, 592.49s/it]
TARGET:  tensor([1, 2, 3, 4, 0, 4, 1, 1, 0, 1, 4, 1, 2, 2, 3, 0, 3, 1, 4, 3, 1, 1, 3, 0,
        2, 1, 3, 4, 2, 4, 3, 1])
OUTPUT:  tensor([1, 2, 3, 4, 0, 4, 1, 1, 0, 1, 3, 1, 2, 2, 3, 0, 3, 1, 4, 3, 1, 1, 1, 0,
        2, 1, 3, 4, 2, 2, 3, 1])
Accuracy after  50 steps:  0.836875
Precision, recall =  tensor(0.9199) tensor(0.9048)
TARGET:  tensor([2, 0, 4, 1, 0, 4, 2, 3, 1, 1, 1, 2, 0, 1, 3, 1, 2, 3, 2, 1, 1, 1, 4, 2,
        4, 0, 2, 0, 1, 3, 1, 1])
OUTPUT:  tensor([2, 0, 4, 4, 0, 4, 2, 3, 1, 1, 1, 2, 3, 1, 3, 1, 4, 3, 2, 1, 1, 1, 4, 4,
        4, 0, 1, 0, 1, 3, 1, 0])
Accuracy after  100 steps:  0.815625
Precision, recall =  tensor(0.8161) tensor(0.8410)
Epoch:  10 Loss:  2.280471014091745  Accuracy:  87.61160714285714 Matthews corr.coef:  tensor(0.8670) Cohen Kappa metric on train tensor(0.8627)
Validating.....
Validation accuracy:  0.22767857142857142

 55%|█████▌    | 11/20 [1:48:36<1:28:53, 592.57s/it]
TARGET:  tensor([1, 2, 0, 1, 1, 0, 3, 1, 4, 4, 4, 2, 2, 1, 0, 3, 2, 1, 1, 0, 2, 3, 2, 0,
        1, 4, 0, 4, 1, 1, 1, 3])
OUTPUT:  tensor([1, 2, 0, 4, 1, 0, 3, 1, 4, 4, 4, 2, 2, 1, 0, 3, 2, 1, 1, 0, 2, 1, 2, 1,
        1, 4, 0, 1, 1, 1, 1, 3])
Accuracy after  50 steps:  0.83875
Precision, recall =  tensor(0.9138) tensor(0.8585)
TARGET:  tensor([3, 1, 2, 0, 2, 1, 3, 0, 3, 0, 4, 2, 0, 0, 1, 4, 4, 0, 0, 2, 0, 1, 2, 4,
        3, 4, 3, 0, 2, 1, 4, 0])
OUTPUT:  tensor([3, 1, 2, 0, 4, 1, 3, 0, 3, 4, 4, 2, 0, 2, 1, 4, 4, 1, 4, 2, 1, 2, 2, 4,
        3, 4, 3, 2, 2, 1, 4, 0])
Accuracy after  100 steps:  0.8265625
Precision, recall =  tensor(0.7917) tensor(0.8067)
Epoch:  11 Loss:  2.2479023862064684  Accuracy:  88.06696428571429 Matthews corr.coef:  tensor(0.7300) Cohen Kappa metric on train tensor(0.7228)
Validating.....

 60%|██████    | 12/20 [1:58:28<1:18:59, 592.48s/it]
Training....
TARGET:  tensor([0, 3, 3, 0, 1, 3, 2, 2, 0, 4, 4, 2, 0, 3, 4, 4, 4, 4, 3, 4, 3, 4, 1, 1,
        1, 1, 4, 4, 3, 1, 4, 3])
OUTPUT:  tensor([0, 3, 3, 0, 1, 3, 2, 2, 0, 2, 4, 2, 0, 3, 3, 4, 4, 3, 3, 4, 3, 2, 1, 1,
        1, 1, 2, 2, 3, 1, 2, 3])
Accuracy after  50 steps:  0.829375
Precision, recall =  tensor(0.8350) tensor(0.8727)
TARGET:  tensor([3, 4, 0, 0, 1, 2, 0, 0, 1, 1, 4, 4, 1, 4, 1, 4, 4, 0, 2, 0, 4, 0, 3, 2,
        1, 1, 4, 1, 2, 2, 1, 2])
OUTPUT:  tensor([3, 4, 0, 0, 1, 2, 0, 0, 1, 1, 4, 4, 1, 4, 4, 2, 4, 0, 4, 0, 4, 0, 3, 4,
        1, 1, 4, 1, 2, 2, 1, 0])
Accuracy after  100 steps:  0.825
Precision, recall =  tensor(0.8650) tensor(0.8528)
Epoch:  12 Loss:  2.397063499050481  Accuracy:  87.62053571428571 Matthews corr.coef:  tensor(0.6672) Cohen Kappa metric on train tensor(0.6461)
Validating.....

 65%|██████▌   | 13/20 [2:08:21<1:09:08, 592.60s/it]
Training....
TARGET:  tensor([1, 2, 2, 2, 1, 1, 3, 0, 4, 4, 0, 1, 1, 1, 0, 2, 4, 0, 1, 0, 1, 0, 1, 1,
        3, 1, 1, 3, 4, 4, 3, 4])
OUTPUT:  tensor([1, 2, 2, 2, 1, 1, 3, 3, 4, 4, 0, 1, 1, 2, 0, 2, 4, 0, 1, 0, 1, 0, 1, 1,
        3, 1, 1, 3, 4, 4, 3, 4])
Accuracy after  50 steps:  0.833125
Precision, recall =  tensor(0.9200) tensor(0.9500)
TARGET:  tensor([3, 4, 4, 1, 1, 4, 1, 4, 0, 4, 3, 1, 0, 2, 2, 3, 4, 2, 2, 1, 4, 2, 4, 1,
        3, 3, 4, 4, 3, 2, 4, 4])
OUTPUT:  tensor([3, 2, 2, 1, 1, 4, 1, 4, 0, 4, 3, 1, 0, 2, 2, 3, 4, 2, 0, 2, 3, 2, 4, 1,
        1, 3, 4, 4, 3, 0, 4, 4])
Accuracy after  100 steps:  0.828125
Precision, recall =  tensor(0.7476) tensor(0.8167)
Epoch:  13 Loss:  2.196350308135152  Accuracy:  88.73214285714286 Matthews corr.coef:  tensor(0.8266) Cohen Kappa metric on train tensor(0.8199)
Validating.....

 70%|███████   | 14/20 [2:18:13<59:14, 592.39s/it]
Training....
TARGET:  tensor([2, 4, 4, 1, 3, 4, 0, 0, 2, 3, 1, 4, 3, 1, 0, 4, 0, 1, 4, 4, 0, 1, 3, 2,
        1, 1, 1, 3, 2, 3, 2, 0])
OUTPUT:  tensor([2, 4, 4, 1, 2, 2, 0, 1, 4, 3, 1, 4, 3, 1, 0, 4, 3, 1, 4, 4, 0, 1, 2, 2,
        1, 1, 1, 3, 2, 3, 4, 4])
Accuracy after  50 steps:  0.83
Precision, recall =  tensor(0.7711) tensor(0.7248)
TARGET:  tensor([2, 1, 1, 2, 4, 1, 3, 2, 0, 4, 2, 0, 1, 3, 4, 2, 2, 3, 3, 3, 4, 0, 4, 2,
        2, 1, 0, 2, 4, 1, 1, 1])
OUTPUT:  tensor([2, 1, 3, 2, 4, 1, 3, 2, 0, 0, 2, 0, 1, 3, 4, 2, 2, 3, 3, 3, 4, 0, 4, 2,
        2, 1, 0, 2, 4, 1, 0, 1])
Accuracy after  100 steps:  0.8215625
Precision, recall =  tensor(0.9000) tensor(0.9167)
Epoch:  14 Loss:  2.3369761156916087  Accuracy:  87.63392857142857 Matthews corr.coef:  tensor(0.7780) Cohen Kappa metric on train tensor(0.7690)
Validating.....
Validation accuracy:  0.20089285714285715

 75%|███████▌  | 15/20 [2:28:06<49:22, 592.52s/it]
TARGET:  tensor([1, 4, 1, 1, 1, 0, 1, 2, 1, 1, 2, 1, 0, 3, 3, 4, 4, 0, 3, 4, 0, 1, 2, 1,
        0, 0, 2, 2, 0, 2, 0, 3])
OUTPUT:  tensor([1, 4, 1, 1, 1, 0, 1, 3, 1, 1, 1, 1, 4, 3, 3, 4, 4, 0, 3, 4, 0, 1, 2, 1,
        0, 0, 4, 2, 1, 4, 0, 3])
Accuracy after  50 steps:  0.833125
Precision, recall =  tensor(0.8410) tensor(0.8167)
TARGET:  tensor([0, 2, 1, 2, 3, 3, 3, 0, 3, 4, 4, 4, 0, 2, 2, 1, 2, 4, 3, 2, 0, 4, 3, 1,
        1, 0, 0, 0, 4, 4, 0, 2])
OUTPUT:  tensor([0, 1, 1, 2, 3, 3, 3, 0, 3, 4, 1, 4, 0, 2, 2, 1, 4, 4, 3, 2, 0, 4, 4, 1,
        1, 1, 0, 1, 4, 2, 0, 2])
Accuracy after  100 steps:  0.834375
Precision, recall =  tensor(0.8095) tensor(0.8024)
Epoch:  15 Loss:  2.24902611545154  Accuracy:  89.22767857142857 Matthews corr.coef:  tensor(0.7738) Cohen Kappa metric on train tensor(0.7712)
Validating.....
Validation accuracy:  0.20870535714285715

 80%|████████  | 16/20 [2:37:58<39:30, 592.59s/it]
TARGET:  tensor([2, 2, 3, 2, 4, 3, 4, 4, 4, 1, 2, 1, 1, 0, 1, 2, 3, 4, 1, 1, 2, 4, 4, 3,
        1, 3, 4, 3, 1, 4, 2, 1])
OUTPUT:  tensor([2, 2, 3, 2, 2, 3, 4, 4, 4, 1, 2, 1, 1, 0, 1, 2, 3, 4, 1, 1, 2, 2, 2, 3,
        1, 3, 4, 3, 1, 4, 2, 1])
Accuracy after  50 steps:  0.843125
Precision, recall =  tensor(0.9400) tensor(0.9333)
TARGET:  tensor([3, 4, 0, 1, 2, 4, 4, 4, 2, 3, 2, 1, 1, 4, 4, 3, 1, 0, 4, 3, 1, 1, 4, 4,
        1, 4, 2, 0, 0, 3, 4, 4])
OUTPUT:  tensor([1, 4, 0, 1, 3, 4, 3, 4, 3, 3, 2, 1, 1, 4, 4, 3, 1, 3, 0, 3, 1, 1, 4, 4,
        1, 4, 3, 0, 3, 3, 4, 1])
Accuracy after  100 steps:  0.82625
Precision, recall =  tensor(0.7689) tensor(0.6600)
Epoch:  16 Loss:  2.3888046448784217  Accuracy:  88.31696428571429 Matthews corr.coef:  tensor(0.7319) Cohen Kappa metric on train tensor(0.7259)
Validating.....
Validation accuracy:  0.21316964285714285

 85%|████████▌ | 17/20 [2:48:05<29:50, 596.90s/it]
TARGET:  tensor([1, 2, 3, 1, 0, 2, 1, 1, 3, 1, 1, 3, 4, 1, 2, 2, 2, 4, 4, 1, 0, 2, 1, 2,
        2, 0, 4, 1, 2, 2, 2, 4])
OUTPUT:  tensor([1, 4, 3, 1, 0, 2, 1, 1, 4, 1, 1, 3, 4, 0, 2, 2, 2, 4, 4, 1, 0, 2, 1, 4,
        4, 4, 4, 4, 2, 2, 4, 4])
Accuracy after  50 steps:  0.82625
Precision, recall =  tensor(0.8167) tensor(0.7539)
TARGET:  tensor([4, 4, 4, 1, 2, 2, 1, 1, 3, 1, 2, 0, 1, 1, 1, 3, 0, 1, 4, 3, 1, 1, 4, 4,
        3, 0, 2, 2, 1, 3, 4, 1])
OUTPUT:  tensor([4, 4, 4, 1, 2, 2, 1, 3, 3, 1, 2, 0, 1, 1, 1, 3, 0, 1, 4, 3, 1, 1, 4, 4,
        3, 0, 2, 2, 1, 3, 4, 1])
Accuracy after  100 steps:  0.833125
Precision, recall =  tensor(0.9667) tensor(0.9833)
Epoch:  17 Loss:  2.1498846198831285  Accuracy:  89.04910714285714 Matthews corr.coef:  tensor(0.8661) Cohen Kappa metric on train tensor(0.8647)
Validating.....

 90%|█████████ | 18/20 [2:57:59<19:51, 595.99s/it]
Training....
TARGET:  tensor([0, 1, 4, 4, 0, 1, 1, 0, 0, 0, 0, 3, 4, 0, 2, 4, 4, 4, 3, 2, 2, 4, 4, 0,
        2, 1, 2, 4, 2, 3, 0, 2])
OUTPUT:  tensor([0, 0, 4, 2, 0, 3, 1, 0, 0, 3, 0, 3, 4, 0, 2, 4, 4, 2, 3, 2, 2, 4, 4, 0,
        2, 1, 3, 4, 2, 3, 0, 2])
Accuracy after  50 steps:  0.84125
