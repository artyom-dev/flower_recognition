
  0%|          | 0/20 [00:00<?, ?it/s]
Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): None
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=5, bias=True)
)
Training....
TARGET:  tensor([3, 2, 1, 4, 0, 4, 4, 1, 0, 3, 4, 4, 4, 4, 2, 1, 1, 2, 1, 0, 1, 4, 0, 4,
        4, 0, 4, 1, 3, 4, 3, 0])
OUTPUT:  tensor([3, 4, 1, 3, 4, 4, 4, 1, 3, 3, 3, 4, 3, 4, 2, 1, 1, 2, 1, 0, 1, 4, 0, 3,
        1, 3, 3, 1, 3, 3, 3, 0])
Accuracy after  50 steps:  0.57875
Precision, recall =  tensor(0.7845) tensor(0.7167)
TARGET:  tensor([1, 3, 0, 3, 1, 0, 1, 0, 3, 2, 4, 2, 2, 0, 2, 4, 3, 2, 1, 3, 0, 3, 3, 4,
        2, 3, 1, 4, 4, 4, 2, 1])
OUTPUT:  tensor([1, 3, 3, 3, 1, 0, 1, 0, 3, 2, 4, 2, 2, 0, 2, 4, 1, 0, 1, 3, 0, 4, 2, 4,
        2, 3, 1, 4, 2, 0, 2, 1])
Accuracy after  100 steps:  0.6475
Precision, recall =  tensor(0.7814) tensor(0.7898)
Epoch:  0 Loss:  3.2503461433308467  Accuracy:  69.51339285714286 Matthews corr.coef:  tensor(0.5166) Cohen Kappa metric on train tensor(0.5040)
  0%|          | 0/20 [00:00<?, ?it/s]C:\Users\USER\AppData\Local\Temp\ipykernel_4356\3234579611.py:77: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  op = F.softmax(inception.forward(inp))
Validation accuracy:  0.8080357142857143
  5%|▌         | 1/20 [04:06<1:18:01, 246.41s/it]
Training....
TARGET:  tensor([4, 3, 4, 0, 4, 1, 0, 4, 1, 0, 0, 2, 2, 3, 0, 4, 0, 1, 1, 0, 0, 2, 4, 0,
        1, 3, 2, 3, 4, 2, 1, 0])
OUTPUT:  tensor([4, 1, 1, 0, 4, 1, 1, 1, 1, 0, 2, 2, 2, 3, 3, 3, 1, 1, 1, 0, 0, 2, 4, 3,
        1, 2, 2, 3, 2, 2, 1, 0])
Accuracy after  50 steps:  0.765625
Precision, recall =  tensor(0.7141) tensor(0.6857)
TARGET:  tensor([4, 3, 4, 3, 3, 0, 2, 4, 0, 0, 0, 4, 3, 2, 2, 1, 1, 3, 1, 3, 1, 0, 4, 0,
        4, 2, 4, 2, 1, 4, 1, 1])
OUTPUT:  tensor([4, 3, 4, 3, 3, 1, 3, 4, 0, 4, 1, 2, 4, 1, 4, 4, 1, 4, 1, 1, 1, 0, 3, 0,
        4, 2, 4, 4, 1, 4, 1, 1])
Accuracy after  100 steps:  0.739375
Precision, recall =  tensor(0.6400) tensor(0.5614)
Epoch:  1 Loss:  2.5381038639960543  Accuracy:  79.10714285714286 Matthews corr.coef:  tensor(0.8234) Cohen Kappa metric on train tensor(0.8208)
Validating.....

 10%|█         | 2/20 [08:17<1:14:42, 249.04s/it]
Training....
TARGET:  tensor([4, 0, 0, 1, 3, 3, 4, 1, 2, 3, 1, 4, 1, 0, 3, 3, 4, 0, 0, 4, 0, 3, 1, 0,
        3, 2, 1, 0, 2, 2, 4, 1])
OUTPUT:  tensor([4, 1, 0, 1, 3, 3, 4, 4, 2, 3, 1, 1, 1, 1, 3, 1, 4, 1, 0, 4, 0, 1, 1, 0,
        3, 3, 1, 1, 2, 4, 4, 1])
Accuracy after  50 steps:  0.7425
Precision, recall =  tensor(0.8018) tensor(0.6810)
TARGET:  tensor([0, 1, 1, 1, 4, 4, 4, 2, 0, 4, 1, 1, 0, 3, 0, 4, 1, 0, 1, 1, 2, 4, 1, 0,
        3, 2, 2, 3, 2, 1, 4, 2])
OUTPUT:  tensor([0, 1, 1, 1, 4, 4, 4, 4, 0, 4, 1, 1, 0, 3, 3, 4, 1, 0, 1, 1, 3, 1, 1, 0,
        1, 3, 2, 0, 2, 0, 4, 2])
Accuracy after  100 steps:  0.7396875
Precision, recall =  tensor(0.7279) tensor(0.6848)
Epoch:  2 Loss:  2.6942741608779346  Accuracy:  78.77678571428571 Matthews corr.coef:  tensor(0.6497) Cohen Kappa metric on train tensor(0.6381)
Validating.....

 15%|█▌        | 3/20 [12:28<1:10:46, 249.82s/it]
Training....
TARGET:  tensor([2, 0, 0, 1, 1, 1, 0, 3, 3, 3, 2, 4, 4, 3, 2, 4, 0, 3, 3, 3, 3, 1, 2, 1,
        4, 3, 1, 2, 3, 1, 0, 2])
OUTPUT:  tensor([4, 0, 0, 1, 1, 1, 0, 3, 4, 3, 2, 4, 0, 3, 2, 4, 0, 0, 3, 0, 3, 4, 2, 4,
        4, 3, 4, 2, 0, 4, 0, 3])
Accuracy after  50 steps:  0.75875
Precision, recall =  tensor(0.7492) tensor(0.6890)
TARGET:  tensor([1, 3, 2, 4, 3, 0, 4, 4, 0, 1, 4, 2, 2, 4, 4, 3, 2, 2, 2, 0, 2, 2, 3, 4,
        4, 3, 2, 1, 4, 1, 1, 3])
OUTPUT:  tensor([1, 1, 2, 4, 3, 0, 0, 1, 0, 1, 4, 1, 2, 2, 4, 2, 2, 2, 2, 0, 2, 2, 3, 0,
        4, 3, 4, 1, 2, 4, 1, 3])
Accuracy after  100 steps:  0.7575
Precision, recall =  tensor(0.7076) tensor(0.7378)
Epoch:  3 Loss:  2.6403043819591403  Accuracy:  80.70535714285714 Matthews corr.coef:  tensor(0.5667) Cohen Kappa metric on train tensor(0.5513)
Validating.....

 20%|██        | 4/20 [16:39<1:06:46, 250.39s/it]
Training....
TARGET:  tensor([3, 1, 2, 1, 0, 4, 2, 0, 2, 4, 1, 2, 2, 0, 4, 2, 3, 1, 3, 3, 1, 0, 0, 1,
        0, 0, 1, 4, 4, 4, 2, 2])
OUTPUT:  tensor([3, 1, 2, 1, 1, 4, 2, 0, 2, 0, 1, 2, 2, 0, 4, 2, 3, 1, 3, 3, 1, 0, 0, 1,
        0, 0, 1, 4, 4, 4, 2, 2])
Accuracy after  50 steps:  0.773125
Precision, recall =  tensor(0.9464) tensor(0.9381)
TARGET:  tensor([4, 3, 1, 0, 1, 1, 4, 1, 0, 3, 2, 3, 2, 3, 1, 2, 4, 2, 3, 0, 2, 4, 3, 3,
        4, 0, 1, 2, 4, 3, 2, 0])
OUTPUT:  tensor([2, 4, 1, 1, 1, 1, 4, 1, 1, 2, 2, 3, 2, 4, 1, 2, 4, 2, 3, 0, 2, 4, 3, 4,
        4, 0, 1, 2, 4, 4, 2, 4])
Accuracy after  100 steps:  0.7625
Precision, recall =  tensor(0.8056) tensor(0.7217)
Epoch:  4 Loss:  2.5984322064157044  Accuracy:  81.40178571428571 Matthews corr.coef:  tensor(0.6575) Cohen Kappa metric on train tensor(0.6450)
Validating.....

 25%|██▌       | 5/20 [20:49<1:02:35, 250.36s/it]
Training....
TARGET:  tensor([4, 2, 2, 3, 4, 1, 3, 4, 0, 4, 4, 4, 4, 3, 1, 2, 2, 3, 1, 4, 2, 0, 1, 0,
        1, 1, 2, 4, 2, 3, 0, 1])
OUTPUT:  tensor([1, 2, 2, 3, 4, 1, 4, 4, 0, 4, 4, 4, 2, 4, 1, 2, 2, 3, 1, 4, 2, 0, 1, 0,
        1, 1, 1, 4, 2, 3, 0, 1])
Accuracy after  50 steps:  0.770625
Precision, recall =  tensor(0.8825) tensor(0.8470)
TARGET:  tensor([1, 0, 4, 4, 4, 1, 1, 1, 3, 2, 2, 4, 4, 2, 4, 1, 4, 4, 2, 2, 4, 1, 4, 2,
        0, 1, 4, 4, 4, 0, 1, 0])
OUTPUT:  tensor([1, 0, 0, 4, 4, 1, 1, 1, 3, 2, 2, 4, 3, 2, 4, 1, 2, 3, 4, 2, 4, 1, 3, 2,
        0, 3, 4, 2, 3, 0, 1, 0])
Accuracy after  100 steps:  0.7575
Precision, recall =  tensor(0.7076) tensor(0.8340)
Epoch:  5 Loss:  2.873896049335599  Accuracy:  80.80803571428571 Matthews corr.coef:  tensor(0.6465) Cohen Kappa metric on train tensor(0.6304)
Validating.....

 30%|███       | 6/20 [25:00<58:29, 250.67s/it]
Training....
TARGET:  tensor([3, 0, 1, 0, 3, 0, 4, 4, 4, 2, 4, 3, 1, 1, 1, 1, 4, 2, 0, 0, 4, 3, 4, 0,
        1, 4, 0, 2, 4, 2, 0, 1])
OUTPUT:  tensor([0, 0, 1, 1, 3, 0, 4, 4, 2, 0, 4, 3, 2, 1, 1, 1, 4, 0, 1, 0, 4, 3, 4, 0,
        1, 1, 1, 2, 4, 2, 0, 1])
Accuracy after  50 steps:  0.7525
Precision, recall =  tensor(0.7450) tensor(0.7020)
TARGET:  tensor([4, 4, 4, 1, 3, 2, 2, 3, 1, 2, 1, 1, 3, 3, 3, 1, 3, 2, 1, 1, 4, 1, 1, 4,
        4, 1, 2, 1, 0, 3, 0, 1])
OUTPUT:  tensor([4, 4, 2, 1, 3, 2, 2, 0, 1, 2, 1, 1, 3, 3, 3, 1, 3, 3, 1, 1, 4, 1, 4, 4,
        4, 1, 2, 1, 0, 3, 0, 1])
Accuracy after  100 steps:  0.7525
Precision, recall =  tensor(0.8314) tensor(0.8814)
Epoch:  6 Loss:  2.9857260352665826  Accuracy:  80.38392857142857 Matthews corr.coef:  tensor(0.7936) Cohen Kappa metric on train tensor(0.7771)
Validating.....

 35%|███▌      | 7/20 [29:12<54:21, 250.91s/it]
Training....
TARGET:  tensor([3, 1, 4, 3, 0, 1, 1, 4, 4, 2, 0, 3, 2, 3, 0, 4, 2, 4, 4, 4, 1, 0, 3, 2,
        3, 0, 1, 3, 0, 1, 3, 4])
OUTPUT:  tensor([4, 2, 4, 2, 4, 2, 1, 0, 4, 2, 0, 3, 3, 4, 0, 4, 4, 4, 4, 4, 1, 0, 3, 2,
        3, 0, 1, 1, 0, 1, 3, 4])
Accuracy after  50 steps:  0.763125
Precision, recall =  tensor(0.6939) tensor(0.6750)
TARGET:  tensor([1, 1, 0, 4, 2, 4, 2, 1, 3, 0, 4, 1, 2, 2, 2, 2, 3, 2, 4, 2, 1, 0, 2, 4,
        1, 0, 2, 4, 2, 2, 1, 4])
OUTPUT:  tensor([1, 1, 0, 4, 0, 4, 4, 3, 3, 0, 4, 0, 4, 4, 0, 2, 3, 3, 2, 2, 1, 0, 4, 4,
        1, 0, 2, 3, 2, 2, 1, 4])
Accuracy after  100 steps:  0.7525
Precision, recall =  tensor(0.6721) tensor(0.7690)
Epoch:  7 Loss:  2.9034084237313698  Accuracy:  80.54017857142857 Matthews corr.coef:  tensor(0.7809) Cohen Kappa metric on train tensor(0.7746)
Validating.....

 40%|████      | 8/20 [33:23<50:12, 251.01s/it]
Training....
TARGET:  tensor([3, 4, 3, 4, 1, 2, 2, 4, 2, 2, 0, 0, 1, 1, 1, 3, 1, 1, 2, 4, 1, 2, 4, 2,
        2, 2, 2, 0, 2, 2, 1, 4])
OUTPUT:  tensor([3, 4, 3, 4, 1, 3, 4, 4, 3, 4, 0, 0, 1, 1, 1, 3, 1, 1, 2, 1, 1, 2, 4, 0,
        2, 2, 2, 0, 2, 4, 1, 4])
Accuracy after  50 steps:  0.745625
Precision, recall =  tensor(0.7728) tensor(0.8667)
TARGET:  tensor([2, 1, 4, 4, 0, 1, 2, 3, 0, 1, 1, 2, 3, 2, 4, 2, 2, 4, 4, 2, 1, 0, 0, 1,
        4, 1, 0, 0, 3, 3, 2, 2])
OUTPUT:  tensor([4, 1, 2, 0, 0, 1, 2, 3, 0, 1, 0, 2, 4, 2, 4, 4, 0, 4, 4, 2, 1, 0, 2, 1,
        4, 1, 0, 0, 2, 3, 2, 2])
Accuracy after  100 steps:  0.7428125
Precision, recall =  tensor(0.7726) tensor(0.7048)
Epoch:  8 Loss:  3.224721913092903  Accuracy:  79.69196428571429 Matthews corr.coef:  tensor(0.7332) Cohen Kappa metric on train tensor(0.7273)
Validating.....

 45%|████▌     | 9/20 [37:34<45:59, 250.87s/it]
Training....
TARGET:  tensor([3, 2, 0, 4, 3, 3, 1, 0, 1, 1, 0, 2, 0, 1, 4, 4, 0, 3, 1, 2, 2, 3, 1, 0,
        0, 2, 3, 3, 1, 1, 3, 1])
OUTPUT:  tensor([3, 2, 0, 4, 3, 2, 4, 0, 1, 1, 2, 4, 0, 1, 4, 4, 0, 3, 3, 2, 2, 3, 1, 2,
        0, 2, 2, 3, 1, 1, 3, 1])
Accuracy after  50 steps:  0.770625
Precision, recall =  tensor(0.7914) tensor(0.8084)
TARGET:  tensor([0, 3, 0, 4, 3, 4, 1, 1, 2, 2, 0, 2, 2, 4, 1, 4, 4, 4, 4, 1, 3, 0, 2, 3,
        4, 2, 1, 2, 1, 3, 0, 1])
OUTPUT:  tensor([4, 3, 0, 4, 3, 4, 1, 4, 0, 2, 0, 0, 0, 4, 1, 3, 3, 4, 4, 0, 3, 0, 2, 3,
        4, 4, 1, 2, 1, 1, 0, 1])
Accuracy after  100 steps:  0.7490625
Precision, recall =  tensor(0.7333) tensor(0.6986)
Epoch:  9 Loss:  2.936127911188773  Accuracy:  80.53125 Matthews corr.coef:  tensor(0.6869) Cohen Kappa metric on train tensor(0.6813)
Validating.....
 45%|████▌     | 9/20 [37:34<45:59, 250.87s/it]C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:288: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if not torch.isfinite(tensor).all():
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:203: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmin = flat.min().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:204: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmax = flat.max().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:239: TracerWarning: Converting a tensor to a Python list might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  {name: wandb.Histogram(np_histogram=(tensor.tolist(), bins.tolist()))},
 50%|█████     | 10/20 [41:46<41:52, 251.24s/it]
Training....
TARGET:  tensor([1, 0, 3, 4, 1, 0, 3, 4, 1, 0, 0, 3, 0, 2, 1, 3, 2, 1, 4, 2, 4, 0, 1, 1,
        1, 3, 1, 1, 2, 3, 4, 1])
OUTPUT:  tensor([1, 0, 3, 2, 1, 0, 2, 4, 1, 0, 4, 1, 0, 2, 1, 2, 2, 1, 4, 2, 4, 0, 0, 1,
        2, 2, 1, 1, 2, 2, 0, 1])
Accuracy after  50 steps:  0.77375
Precision, recall =  tensor(0.7529) tensor(0.6836)
TARGET:  tensor([3, 3, 0, 0, 0, 4, 3, 3, 3, 1, 4, 4, 2, 3, 3, 4, 0, 1, 1, 0, 2, 0, 3, 1,
        2, 4, 0, 1, 4, 0, 4, 2])
OUTPUT:  tensor([3, 3, 0, 0, 0, 4, 3, 4, 3, 1, 4, 1, 2, 1, 3, 4, 3, 1, 1, 0, 0, 0, 1, 1,
        2, 4, 2, 1, 4, 0, 3, 2])
Accuracy after  100 steps:  0.74875
Precision, recall =  tensor(0.7560) tensor(0.7679)
Epoch:  10 Loss:  3.2276358072246825  Accuracy:  80.13392857142857 Matthews corr.coef:  tensor(0.7794) Cohen Kappa metric on train tensor(0.7731)
Validating.....

 55%|█████▌    | 11/20 [45:57<37:41, 251.25s/it]
Training....
TARGET:  tensor([4, 0, 3, 1, 4, 2, 1, 0, 3, 0, 2, 2, 1, 0, 2, 2, 0, 0, 1, 4, 2, 1, 4, 1,
        0, 1, 4, 4, 1, 4, 1, 4])
OUTPUT:  tensor([1, 0, 3, 1, 2, 2, 1, 1, 3, 0, 1, 2, 1, 0, 2, 2, 1, 2, 0, 2, 0, 1, 3, 1,
        0, 1, 1, 3, 1, 1, 1, 4])
Accuracy after  50 steps:  0.773125
Precision, recall =  tensor(0.6619) tensor(0.6504)
TARGET:  tensor([2, 3, 4, 0, 3, 2, 4, 4, 3, 3, 0, 3, 1, 0, 3, 4, 3, 3, 4, 2, 4, 3, 0, 0,
        1, 1, 1, 3, 2, 3, 3, 3])
OUTPUT:  tensor([2, 3, 4, 0, 0, 2, 4, 4, 3, 3, 0, 1, 1, 0, 4, 4, 4, 3, 4, 4, 4, 3, 0, 0,
        1, 4, 1, 1, 1, 3, 2, 1])
Accuracy after  100 steps:  0.754375
Precision, recall =  tensor(0.7057) tensor(0.7423)
Epoch:  11 Loss:  3.2420840689114163  Accuracy:  80.75 Matthews corr.coef:  tensor(0.7077) Cohen Kappa metric on train tensor(0.6874)
Validating.....

 60%|██████    | 12/20 [50:09<33:31, 251.49s/it]
Training....
TARGET:  tensor([4, 0, 2, 2, 4, 3, 1, 1, 4, 0, 4, 2, 2, 1, 4, 1, 1, 1, 1, 0, 2, 2, 4, 4,
        2, 4, 4, 0, 0, 1, 1, 2])
OUTPUT:  tensor([4, 0, 1, 2, 4, 3, 1, 1, 4, 0, 2, 2, 3, 1, 4, 1, 1, 1, 3, 0, 3, 1, 4, 4,
        2, 4, 4, 0, 0, 1, 1, 2])
Accuracy after  50 steps:  0.77125
Precision, recall =  tensor(0.7700) tensor(0.8556)
TARGET:  tensor([1, 1, 4, 4, 4, 0, 2, 2, 0, 3, 1, 4, 0, 4, 3, 2, 0, 0, 1, 1, 1, 1, 0, 4,
        2, 3, 3, 4, 0, 2, 1, 2])
OUTPUT:  tensor([1, 1, 0, 4, 4, 4, 0, 2, 0, 3, 1, 4, 0, 4, 3, 2, 0, 4, 1, 1, 1, 1, 0, 4,
        2, 3, 0, 4, 0, 4, 4, 4])
Accuracy after  100 steps:  0.7603125
Precision, recall =  tensor(0.8341) tensor(0.7393)
Epoch:  12 Loss:  2.988448100696717  Accuracy:  81.01785714285714 Matthews corr.coef:  tensor(0.8752) Cohen Kappa metric on train tensor(0.8654)
Validating.....

 65%|██████▌   | 13/20 [54:20<29:19, 251.37s/it]
Training....
TARGET:  tensor([1, 3, 3, 1, 2, 0, 4, 0, 3, 4, 1, 1, 1, 3, 0, 1, 2, 4, 0, 1, 0, 4, 0, 1,
        4, 4, 1, 2, 2, 1, 2, 2])
OUTPUT:  tensor([1, 4, 3, 1, 2, 0, 4, 0, 1, 4, 0, 1, 1, 3, 0, 1, 2, 4, 0, 1, 0, 4, 2, 1,
        2, 4, 1, 2, 2, 0, 1, 2])
Accuracy after  50 steps:  0.751875
Precision, recall =  tensor(0.8124) tensor(0.7600)
TARGET:  tensor([1, 4, 4, 1, 2, 2, 2, 1, 4, 0, 3, 1, 1, 0, 2, 1, 3, 0, 1, 4, 4, 4, 0, 0,
        1, 4, 1, 1, 3, 2, 2, 3])
OUTPUT:  tensor([1, 4, 4, 1, 2, 2, 4, 1, 2, 4, 4, 1, 1, 0, 4, 1, 3, 0, 4, 4, 4, 3, 0, 1,
        2, 4, 1, 1, 3, 4, 4, 3])
Accuracy after  100 steps:  0.74625
Precision, recall =  tensor(0.7111) tensor(0.6395)
Epoch:  13 Loss:  3.379733960410314  Accuracy:  79.82142857142857 Matthews corr.coef:  tensor(0.7841) Cohen Kappa metric on train tensor(0.7753)
Validating.....
Validation accuracy:  0.8069196428571429

 70%|███████   | 14/20 [58:32<25:09, 251.50s/it]
TARGET:  tensor([0, 4, 2, 3, 1, 4, 1, 0, 3, 3, 3, 3, 1, 2, 3, 1, 4, 2, 1, 1, 1, 0, 3, 1,
        4, 4, 4, 1, 4, 4, 1, 0])
OUTPUT:  tensor([0, 4, 2, 3, 1, 4, 1, 0, 1, 4, 3, 2, 1, 2, 1, 1, 4, 2, 1, 1, 1, 0, 3, 1,
        4, 4, 4, 1, 4, 4, 1, 3])
Accuracy after  50 steps:  0.776875
Precision, recall =  tensor(0.8444) tensor(0.8357)
TARGET:  tensor([3, 1, 2, 0, 2, 1, 1, 4, 4, 1, 0, 4, 0, 1, 3, 1, 1, 3, 2, 4, 4, 3, 3, 3,
        4, 1, 4, 1, 3, 4, 0, 0])
OUTPUT:  tensor([3, 1, 2, 2, 2, 1, 1, 4, 4, 1, 0, 4, 1, 1, 3, 2, 1, 1, 4, 4, 4, 2, 4, 3,
        4, 1, 0, 1, 1, 1, 0, 0])
Accuracy after  100 steps:  0.7625
Precision, recall =  tensor(0.7133) tensor(0.6668)
Epoch:  14 Loss:  3.1174229962219084  Accuracy:  81.22767857142857 Matthews corr.coef:  tensor(0.7787) Cohen Kappa metric on train tensor(0.7724)
Validating.....
Validation accuracy:  0.8348214285714286

 75%|███████▌  | 15/20 [1:02:43<20:57, 251.51s/it]
TARGET:  tensor([2, 4, 2, 3, 1, 1, 4, 1, 1, 4, 0, 1, 3, 2, 3, 0, 4, 2, 0, 2, 0, 1, 0, 1,
        1, 0, 4, 2, 0, 0, 4, 1])
OUTPUT:  tensor([2, 0, 2, 3, 4, 1, 4, 1, 4, 4, 0, 1, 3, 2, 4, 1, 3, 2, 4, 2, 0, 1, 0, 1,
        1, 0, 4, 2, 0, 2, 2, 1])
Accuracy after  50 steps:  0.77625
Precision, recall =  tensor(0.7107) tensor(0.7139)
TARGET:  tensor([3, 3, 3, 4, 1, 3, 4, 3, 2, 3, 0, 3, 4, 4, 2, 4, 4, 2, 2, 0, 4, 3, 4, 1,
        2, 4, 3, 3, 1, 0, 0, 0])
OUTPUT:  tensor([3, 1, 4, 4, 1, 4, 4, 3, 2, 3, 2, 3, 4, 4, 4, 4, 4, 2, 2, 0, 4, 0, 4, 1,
        4, 1, 3, 0, 1, 0, 0, 0])
Accuracy after  100 steps:  0.75875
Precision, recall =  tensor(0.7367) tensor(0.7578)
Epoch:  15 Loss:  3.128047803150756  Accuracy:  80.71428571428571 Matthews corr.coef:  tensor(0.6194) Cohen Kappa metric on train tensor(0.6118)
Validating.....
Validation accuracy:  0.8337053571428571

 80%|████████  | 16/20 [1:06:55<16:45, 251.40s/it]
TARGET:  tensor([1, 0, 0, 3, 1, 3, 4, 0, 1, 1, 0, 3, 2, 4, 4, 2, 1, 0, 0, 2, 4, 3, 1, 3,
        4, 0, 3, 4, 4, 4, 0, 2])
OUTPUT:  tensor([1, 0, 0, 3, 1, 1, 1, 0, 0, 1, 0, 3, 0, 4, 4, 0, 3, 0, 1, 2, 4, 3, 1, 3,
        4, 0, 1, 2, 4, 4, 0, 2])
Accuracy after  50 steps:  0.789375
Precision, recall =  tensor(0.7333) tensor(0.6917)
TARGET:  tensor([3, 0, 0, 3, 3, 4, 1, 0, 3, 2, 1, 3, 2, 4, 4, 3, 2, 1, 0, 2, 4, 2, 0, 4,
        1, 0, 1, 0, 3, 0, 0, 4])
OUTPUT:  tensor([3, 0, 0, 3, 4, 4, 0, 0, 3, 2, 1, 4, 2, 4, 4, 3, 2, 1, 0, 4, 4, 2, 1, 4,
        0, 0, 1, 0, 2, 0, 0, 4])
Accuracy after  100 steps:  0.7734375
Precision, recall =  tensor(0.8033) tensor(0.7721)
Epoch:  16 Loss:  3.0573365752186095  Accuracy:  82.49107142857143 Matthews corr.coef:  tensor(0.5901) Cohen Kappa metric on train tensor(0.5772)
Validating.....
Validation accuracy:  0.8169642857142857

 85%|████████▌ | 17/20 [1:11:06<12:34, 251.43s/it]
TARGET:  tensor([2, 3, 3, 2, 4, 4, 2, 0, 3, 4, 4, 1, 0, 2, 4, 1, 2, 4, 2, 0, 1, 0, 0, 4,
        2, 3, 0, 2, 0, 0, 1, 1])
OUTPUT:  tensor([2, 3, 3, 2, 3, 4, 2, 0, 3, 2, 4, 1, 0, 3, 4, 1, 2, 4, 2, 0, 1, 0, 0, 3,
        3, 3, 0, 2, 1, 0, 1, 0])
Accuracy after  50 steps:  0.738125
Precision, recall =  tensor(0.8064) tensor(0.7993)
TARGET:  tensor([3, 1, 4, 3, 3, 1, 0, 2, 0, 0, 4, 1, 2, 4, 2, 4, 1, 3, 1, 4, 1, 1, 1, 0,
        1, 0, 0, 3, 2, 1, 1, 3])
OUTPUT:  tensor([3, 1, 4, 3, 4, 1, 0, 2, 0, 0, 4, 0, 3, 0, 4, 4, 1, 3, 1, 2, 1, 1, 0, 0,
        1, 4, 0, 4, 2, 1, 1, 3])
Accuracy after  100 steps:  0.75
Precision, recall =  tensor(0.7040) tensor(0.6836)
Epoch:  17 Loss:  3.354505668926452  Accuracy:  79.94642857142857 Matthews corr.coef:  tensor(0.7855) Cohen Kappa metric on train tensor(0.7727)
Validating.....
Validation accuracy:  0.8348214285714286

 90%|█████████ | 18/20 [1:15:17<08:22, 251.41s/it]
TARGET:  tensor([2, 1, 1, 4, 2, 4, 2, 1, 2, 0, 1, 1, 3, 4, 0, 4, 1, 3, 1, 2, 1, 4, 3, 4,
        4, 4, 2, 0, 1, 1, 1, 1])
OUTPUT:  tensor([2, 1, 2, 2, 2, 4, 2, 1, 2, 0, 1, 1, 3, 4, 0, 4, 4, 0, 0, 2, 1, 4, 3, 4,
        4, 4, 3, 0, 0, 1, 4, 1])
Accuracy after  50 steps:  0.77375
Precision, recall =  tensor(0.7317) tensor(0.7917)
TARGET:  tensor([2, 1, 0, 4, 2, 0, 0, 2, 4, 0, 2, 3, 3, 1, 0, 2, 2, 1, 0, 2, 0, 4, 1, 3,
        0, 4, 1, 3, 4, 1, 1, 3])
OUTPUT:  tensor([3, 3, 0, 4, 2, 3, 1, 2, 4, 2, 1, 3, 3, 1, 0, 0, 4, 4, 0, 2, 0, 4, 1, 3,
        0, 4, 1, 3, 2, 1, 1, 3])
Accuracy after  100 steps:  0.775
Precision, recall =  tensor(0.6879) tensor(0.7136)
Epoch:  18 Loss:  2.9973019464606687  Accuracy:  82.42410714285714 Matthews corr.coef:  tensor(0.5345) Cohen Kappa metric on train tensor(0.5164)
Validating.....
Validation accuracy:  0.8470982142857143

 95%|█████████▌| 19/20 [1:19:29<04:11, 251.44s/it]
TARGET:  tensor([2, 0, 0, 0, 2, 4, 4, 4, 4, 4, 0, 1, 4, 1, 0, 0, 2, 0, 3, 4, 1, 3, 1, 4,
        0, 4, 2, 2, 3, 0, 3, 1])
OUTPUT:  tensor([2, 0, 0, 3, 3, 4, 4, 4, 3, 1, 0, 1, 4, 1, 0, 0, 2, 0, 3, 4, 1, 3, 1, 4,
        0, 2, 2, 2, 3, 0, 3, 1])
Accuracy after  50 steps:  0.783125
Precision, recall =  tensor(0.8410) tensor(0.8711)
TARGET:  tensor([1, 3, 4, 2, 2, 4, 0, 2, 1, 3, 0, 1, 0, 4, 1, 0, 1, 1, 4, 3, 3, 4, 2, 2,
        1, 0, 3, 4, 3, 3, 4, 1])
OUTPUT:  tensor([1, 3, 4, 2, 2, 4, 1, 2, 3, 1, 0, 1, 2, 3, 1, 0, 1, 1, 2, 3, 3, 4, 4, 2,
        1, 3, 3, 4, 2, 3, 4, 1])
Accuracy after  100 steps:  0.76625
Precision, recall =  tensor(0.7615) tensor(0.7007)
Epoch:  19 Loss:  3.1056488962577924  Accuracy:  81.79017857142857 Matthews corr.coef:  tensor(0.4596) Cohen Kappa metric on train tensor(0.4483)
Validating.....

100%|██████████| 20/20 [1:23:41<00:00, 251.07s/it]