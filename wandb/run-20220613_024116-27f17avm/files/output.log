
  0%|          | 0/20 [00:00<?, ?it/s]
EfficientNet(
  (features): Sequential(
    (0): ConvNormActivation(
      (0): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)
      (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): SiLU(inplace=True)
    )
    (1): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=32, bias=False)
            (1): BatchNorm2d(32, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(32, 8, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(8, 32, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (2): ConvNormActivation(
            (0): Conv2d(32, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.0, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(16, 16, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=16, bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(16, 4, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(4, 16, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (2): ConvNormActivation(
            (0): Conv2d(16, 16, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(16, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.008695652173913044, mode=row)
      )
    )
    (2): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(16, 96, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=96, bias=False)
            (1): BatchNorm2d(96, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(96, 4, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(4, 96, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(96, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.017391304347826087, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.026086956521739136, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(144, 144, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=144, bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(144, 24, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(24, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.034782608695652174, mode=row)
      )
    )
    (3): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(24, 144, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(144, 144, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=144, bias=False)
            (1): BatchNorm2d(144, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(144, 6, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(6, 144, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(144, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.043478260869565216, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.05217391304347827, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(240, 240, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=240, bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(240, 40, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(40, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.06086956521739131, mode=row)
      )
    )
    (4): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(40, 240, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(240, 240, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), groups=240, bias=False)
            (1): BatchNorm2d(240, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(240, 10, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(10, 240, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(240, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.06956521739130435, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.0782608695652174, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.08695652173913043, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(480, 480, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=480, bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(480, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(80, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.09565217391304348, mode=row)
      )
    )
    (5): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(80, 480, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(480, 480, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=480, bias=False)
            (1): BatchNorm2d(480, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(480, 20, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(20, 480, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(480, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.10434782608695654, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.11304347826086956, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.12173913043478261, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=672, bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(672, 112, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(112, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.13043478260869565, mode=row)
      )
    )
    (6): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(112, 672, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(672, 672, kernel_size=(5, 5), stride=(2, 2), padding=(2, 2), groups=672, bias=False)
            (1): BatchNorm2d(672, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(672, 28, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(28, 672, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(672, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.1391304347826087, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.14782608695652175, mode=row)
      )
      (2): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.1565217391304348, mode=row)
      )
      (3): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.16521739130434784, mode=row)
      )
      (4): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1152, 1152, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), groups=1152, bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1152, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(192, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.17391304347826086, mode=row)
      )
    )
    (7): Sequential(
      (0): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(192, 1152, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1152, 1152, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1152, bias=False)
            (1): BatchNorm2d(1152, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1152, 48, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(48, 1152, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1152, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.1826086956521739, mode=row)
      )
      (1): MBConv(
        (block): Sequential(
          (0): ConvNormActivation(
            (0): Conv2d(320, 1920, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (1): ConvNormActivation(
            (0): Conv2d(1920, 1920, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), groups=1920, bias=False)
            (1): BatchNorm2d(1920, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
            (2): SiLU(inplace=True)
          )
          (2): SqueezeExcitation(
            (avgpool): AdaptiveAvgPool2d(output_size=1)
            (fc1): Conv2d(1920, 80, kernel_size=(1, 1), stride=(1, 1))
            (fc2): Conv2d(80, 1920, kernel_size=(1, 1), stride=(1, 1))
            (activation): SiLU(inplace=True)
            (scale_activation): Sigmoid()
          )
          (3): ConvNormActivation(
            (0): Conv2d(1920, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
            (1): BatchNorm2d(320, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          )
        )
        (stochastic_depth): StochasticDepth(p=0.19130434782608696, mode=row)
      )
    )
    (8): ConvNormActivation(
      (0): Conv2d(320, 1280, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (1): BatchNorm2d(1280, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
      (2): SiLU(inplace=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=1)
  (classifier): Sequential(
    (0): Dropout(p=0.2, inplace=True)
    (1): Linear(in_features=1280, out_features=5, bias=True)
  )
)
Training....
TARGET:  tensor([3, 4, 1, 1, 2, 4, 0, 0, 4, 0, 0, 2, 3, 0, 4, 2, 1, 4, 0, 3, 1, 1, 1, 0,
        4, 0, 4, 0, 2, 2, 2, 0])
OUTPUT:  tensor([3, 4, 1, 1, 2, 3, 0, 1, 4, 3, 0, 2, 3, 1, 4, 2, 1, 3, 0, 3, 1, 1, 1, 0,
        4, 0, 4, 0, 2, 2, 1, 1])
Accuracy after  50 steps:  0.750625
Precision, recall =  tensor(0.8200) tensor(0.8295)
TARGET:  tensor([1, 3, 1, 2, 0, 4, 0, 2, 2, 0, 1, 1, 1, 4, 4, 4, 4, 2, 1, 1, 1, 1, 2, 1,
        3, 4, 0, 4, 4, 4, 0, 1])
OUTPUT:  tensor([1, 3, 1, 2, 3, 4, 3, 2, 3, 0, 1, 1, 1, 0, 4, 4, 4, 2, 1, 1, 3, 1, 2, 1,
        3, 4, 0, 0, 4, 2, 0, 1])
Accuracy after  100 steps:  0.7828125
Precision, recall =  tensor(0.7467) tensor(0.7952)
Epoch:  0 Loss:  2.0232686568051577  Accuracy:  84.01785714285714 Matthews corr.coef:  tensor(0.8696) Cohen Kappa metric on train tensor(0.8623)
  0%|          | 0/20 [00:00<?, ?it/s]C:\Users\USER\AppData\Local\Temp\ipykernel_4356\3234579611.py:77: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  op = F.softmax(inception.forward(inp))
Validation accuracy:  0.828125
  5%|▌         | 1/20 [05:31<1:44:50, 331.09s/it]
Training....
TARGET:  tensor([1, 0, 0, 3, 4, 1, 3, 4, 0, 4, 1, 4, 1, 0, 3, 2, 2, 2, 2, 3, 0, 3, 4, 3,
        2, 2, 3, 0, 1, 2, 1, 2])
OUTPUT:  tensor([1, 0, 0, 3, 4, 1, 3, 4, 0, 4, 1, 3, 2, 0, 3, 2, 0, 2, 2, 1, 0, 3, 4, 3,
        2, 4, 3, 0, 1, 2, 1, 2])
Accuracy after  50 steps:  0.873125
Precision, recall =  tensor(0.8410) tensor(0.8481)
TARGET:  tensor([1, 4, 1, 0, 4, 4, 1, 0, 0, 0, 4, 1, 2, 0, 4, 2, 1, 0, 3, 2, 1, 4, 2, 4,
        0, 1, 2, 4, 1, 4, 1, 3])
OUTPUT:  tensor([1, 4, 1, 2, 3, 4, 1, 0, 0, 0, 4, 1, 2, 0, 4, 2, 1, 0, 3, 2, 1, 4, 2, 4,
        0, 3, 2, 4, 1, 4, 1, 3])
Accuracy after  100 steps:  0.8571875
Precision, recall =  tensor(0.8667) tensor(0.9270)
Epoch:  1 Loss:  1.4487339028356863  Accuracy:  91.63392857142857 Matthews corr.coef:  tensor(0.7830) Cohen Kappa metric on train tensor(0.7767)
Validating.....
Validation accuracy:  0.828125

 10%|█         | 2/20 [11:00<1:39:06, 330.35s/it]
TARGET:  tensor([4, 2, 4, 3, 3, 3, 4, 4, 4, 1, 3, 1, 4, 4, 4, 2, 0, 4, 2, 1, 4, 1, 1, 0,
        4, 1, 3, 2, 2, 2, 1, 2])
OUTPUT:  tensor([4, 2, 2, 3, 3, 3, 4, 3, 4, 0, 3, 1, 3, 4, 0, 4, 0, 4, 2, 1, 4, 1, 1, 0,
        4, 1, 3, 2, 3, 3, 3, 2])
Accuracy after  50 steps:  0.883125
Precision, recall =  tensor(0.7350) tensor(0.7844)
TARGET:  tensor([1, 1, 1, 3, 1, 1, 2, 4, 2, 2, 4, 0, 2, 2, 4, 4, 1, 0, 4, 3, 1, 3, 4, 1,
        2, 1, 1, 1, 3, 1, 2, 4])
OUTPUT:  tensor([1, 1, 0, 3, 1, 0, 2, 4, 2, 3, 4, 0, 2, 2, 4, 2, 1, 0, 2, 3, 1, 0, 4, 1,
        3, 4, 1, 1, 3, 1, 2, 4])
Accuracy after  100 steps:  0.86875
Precision, recall =  tensor(0.7095) tensor(0.7857)
Epoch:  2 Loss:  1.3491218288296036  Accuracy:  92.65178571428571 Matthews corr.coef:  tensor(0.6524) Cohen Kappa metric on train tensor(0.6387)
Validating.....
Validation accuracy:  0.7935267857142857

 15%|█▌        | 3/20 [16:30<1:33:28, 329.90s/it]
TARGET:  tensor([2, 3, 2, 2, 0, 0, 2, 1, 4, 4, 4, 4, 2, 3, 3, 4, 3, 4, 2, 1, 1, 2, 1, 1,
        2, 3, 0, 4, 4, 1, 2, 4])
OUTPUT:  tensor([0, 3, 2, 2, 0, 0, 2, 1, 4, 4, 2, 4, 4, 3, 3, 4, 3, 4, 2, 0, 1, 4, 1, 1,
        0, 3, 0, 4, 4, 1, 2, 0])
Accuracy after  50 steps:  0.8725
Precision, recall =  tensor(0.8079) tensor(0.8333)
TARGET:  tensor([2, 4, 0, 2, 4, 4, 2, 3, 0, 4, 2, 3, 0, 3, 1, 1, 2, 2, 3, 2, 4, 3, 1, 3,
        0, 2, 0, 0, 1, 4, 4, 0])
OUTPUT:  tensor([2, 4, 0, 4, 4, 4, 2, 3, 0, 2, 2, 3, 0, 3, 1, 1, 2, 2, 4, 2, 4, 3, 1, 1,
        0, 2, 0, 0, 1, 1, 0, 0])
Accuracy after  100 steps:  0.8603125
Precision, recall =  tensor(0.8167) tensor(0.8226)
Epoch:  3 Loss:  1.375260735662388  Accuracy:  91.85714285714286 Matthews corr.coef:  tensor(0.8198) Cohen Kappa metric on train tensor(0.8185)
Validating.....

 20%|██        | 4/20 [21:59<1:27:56, 329.79s/it]
Training....
TARGET:  tensor([0, 2, 4, 1, 4, 3, 0, 1, 2, 1, 3, 1, 3, 2, 1, 3, 3, 4, 1, 1, 4, 3, 0, 3,
        4, 4, 1, 1, 4, 2, 4, 0])
OUTPUT:  tensor([0, 2, 4, 1, 4, 3, 0, 1, 2, 1, 3, 1, 3, 2, 1, 3, 3, 2, 0, 3, 4, 3, 0, 3,
        2, 2, 2, 1, 4, 2, 4, 0])
Accuracy after  50 steps:  0.888125
Precision, recall =  tensor(0.8350) tensor(0.8583)
TARGET:  tensor([1, 0, 0, 4, 0, 3, 4, 2, 2, 3, 0, 0, 0, 4, 2, 4, 4, 2, 3, 0, 1, 4, 3, 1,
        0, 0, 4, 4, 2, 3, 4, 1])
OUTPUT:  tensor([1, 0, 0, 1, 4, 3, 4, 2, 2, 3, 0, 0, 0, 4, 2, 3, 4, 4, 3, 0, 1, 4, 3, 1,
        3, 0, 4, 4, 2, 3, 4, 1])
Accuracy after  100 steps:  0.8746875
Precision, recall =  tensor(0.8584) tensor(0.8711)
Epoch:  4 Loss:  1.3284806845809467  Accuracy:  92.87946428571429 Matthews corr.coef:  tensor(0.7484) Cohen Kappa metric on train tensor(0.7329)
Validating.....

 25%|██▌       | 5/20 [27:29<1:22:24, 329.63s/it]
Training....
TARGET:  tensor([0, 3, 1, 3, 2, 1, 1, 4, 3, 3, 0, 4, 1, 2, 1, 3, 3, 1, 0, 4, 0, 2, 3, 2,
        4, 0, 1, 4, 2, 2, 1, 3])
OUTPUT:  tensor([0, 3, 1, 3, 2, 1, 1, 4, 3, 3, 0, 4, 1, 2, 1, 3, 3, 1, 0, 4, 0, 2, 3, 2,
        4, 0, 1, 4, 2, 2, 1, 3])
Accuracy after  50 steps:  0.878125
Precision, recall =  tensor(1.) tensor(1.)
TARGET:  tensor([1, 0, 1, 3, 1, 1, 4, 0, 1, 4, 0, 1, 1, 0, 3, 4, 1, 4, 0, 4, 0, 2, 2, 4,
        4, 1, 1, 4, 2, 4, 2, 4])
OUTPUT:  tensor([1, 0, 1, 3, 1, 1, 4, 0, 1, 3, 4, 1, 1, 0, 3, 4, 1, 4, 0, 4, 0, 2, 2, 2,
        4, 1, 1, 4, 2, 4, 2, 4])
Accuracy after  100 steps:  0.8659375
Precision, recall =  tensor(0.8711) tensor(0.9267)
Epoch:  5 Loss:  1.3501678416838072  Accuracy:  92.61160714285714 Matthews corr.coef:  tensor(0.8702) Cohen Kappa metric on train tensor(0.8600)
Validating.....

 30%|███       | 6/20 [32:59<1:16:57, 329.82s/it]
Training....
TARGET:  tensor([0, 0, 1, 2, 1, 0, 3, 0, 4, 4, 4, 1, 4, 0, 2, 1, 1, 1, 2, 1, 4, 3, 3, 4,
        1, 4, 0, 3, 2, 4, 0, 2])
OUTPUT:  tensor([0, 0, 1, 2, 1, 0, 3, 3, 4, 3, 1, 1, 4, 2, 2, 1, 1, 1, 4, 1, 4, 3, 3, 4,
        1, 4, 0, 3, 2, 4, 0, 2])
Accuracy after  50 steps:  0.90125
Precision, recall =  tensor(0.8425) tensor(0.8529)
TARGET:  tensor([4, 4, 1, 0, 1, 3, 1, 2, 3, 0, 0, 4, 0, 4, 4, 4, 4, 0, 4, 1, 4, 4, 4, 1,
        1, 1, 1, 4, 1, 0, 1, 3])
OUTPUT:  tensor([4, 4, 1, 0, 1, 3, 0, 2, 3, 0, 0, 4, 0, 4, 4, 4, 4, 1, 4, 2, 2, 2, 4, 1,
        1, 1, 1, 2, 1, 0, 1, 3])
Accuracy after  100 steps:  0.8878125
Precision, recall =  tensor(0.7844) tensor(0.8767)
Epoch:  6 Loss:  1.2202779469412885  Accuracy:  94.98660714285714 Matthews corr.coef:  tensor(0.8667) Cohen Kappa metric on train tensor(0.8639)
Validating.....

 35%|███▌      | 7/20 [38:30<1:11:31, 330.10s/it]
Training....
TARGET:  tensor([1, 4, 4, 3, 4, 0, 1, 0, 3, 4, 0, 1, 1, 2, 1, 0, 2, 1, 4, 3, 1, 2, 3, 2,
        4, 3, 3, 4, 4, 2, 3, 0])
OUTPUT:  tensor([1, 4, 4, 3, 4, 0, 4, 2, 3, 4, 0, 1, 1, 2, 1, 0, 2, 1, 4, 2, 1, 2, 0, 2,
        4, 3, 3, 4, 4, 2, 3, 0])
Accuracy after  50 steps:  0.90375
Precision, recall =  tensor(0.8806) tensor(0.8743)
TARGET:  tensor([4, 4, 1, 0, 1, 1, 1, 1, 2, 4, 1, 3, 4, 1, 4, 1, 0, 4, 1, 0, 4, 3, 2, 1,
        4, 3, 3, 4, 1, 0, 2, 1])
OUTPUT:  tensor([4, 4, 1, 0, 1, 1, 1, 1, 2, 4, 3, 1, 4, 1, 4, 1, 0, 2, 1, 0, 2, 3, 4, 1,
        4, 3, 3, 4, 1, 0, 2, 1])
Accuracy after  100 steps:  0.8915625
Precision, recall =  tensor(0.8083) tensor(0.8222)
Epoch:  7 Loss:  1.1306075262171882  Accuracy:  95.49107142857143 Matthews corr.coef:  tensor(0.9134) Cohen Kappa metric on train tensor(0.9089)
Validating.....

 40%|████      | 8/20 [43:59<1:05:59, 329.97s/it]
Training....
TARGET:  tensor([2, 2, 0, 1, 4, 4, 1, 1, 4, 0, 4, 1, 0, 4, 3, 1, 4, 1, 2, 0, 3, 0, 2, 3,
        1, 3, 3, 4, 4, 4, 2, 1])
OUTPUT:  tensor([2, 0, 0, 1, 4, 4, 1, 1, 4, 0, 4, 1, 0, 4, 3, 1, 4, 1, 2, 4, 3, 0, 2, 3,
        1, 3, 0, 4, 4, 4, 4, 1])
Accuracy after  50 steps:  0.891875
Precision, recall =  tensor(0.8970) tensor(0.8400)
TARGET:  tensor([1, 3, 1, 1, 1, 2, 2, 0, 4, 3, 2, 4, 4, 1, 4, 1, 0, 3, 4, 0, 3, 4, 2, 2,
        1, 0, 1, 0, 1, 4, 1, 1])
OUTPUT:  tensor([1, 3, 1, 0, 1, 2, 2, 0, 4, 3, 2, 1, 4, 1, 4, 1, 0, 3, 4, 0, 3, 4, 0, 2,
        1, 0, 0, 0, 1, 4, 1, 1])
Accuracy after  100 steps:  0.879375
Precision, recall =  tensor(0.9050) tensor(0.8951)
Epoch:  8 Loss:  1.2881986725343657  Accuracy:  94.10267857142857 Matthews corr.coef:  tensor(0.7697) Cohen Kappa metric on train tensor(0.7643)
Validating.....
Validation accuracy:  0.828125

 45%|████▌     | 9/20 [49:29<1:00:28, 329.86s/it]
TARGET:  tensor([3, 1, 4, 2, 1, 2, 1, 3, 3, 0, 0, 1, 3, 4, 4, 4, 4, 3, 0, 4, 2, 1, 2, 4,
        1, 0, 4, 1, 0, 0, 2, 0])
OUTPUT:  tensor([3, 1, 4, 2, 1, 2, 1, 3, 3, 0, 0, 1, 3, 4, 4, 4, 4, 3, 1, 4, 2, 0, 2, 4,
        1, 0, 4, 1, 1, 0, 2, 1])
Accuracy after  50 steps:  0.885
Precision, recall =  tensor(0.8933) tensor(0.8857)
TARGET:  tensor([0, 2, 0, 2, 0, 4, 3, 2, 1, 0, 2, 4, 2, 3, 2, 3, 2, 1, 4, 4, 2, 4, 4, 2,
        2, 3, 4, 0, 0, 2, 0, 2])
OUTPUT:  tensor([0, 2, 4, 4, 0, 4, 1, 3, 1, 0, 2, 4, 2, 3, 2, 3, 2, 1, 4, 4, 2, 4, 4, 3,
        2, 3, 4, 0, 0, 2, 0, 2])
Accuracy after  100 steps:  0.8753125
Precision, recall =  tensor(0.8089) tensor(0.8714)
Epoch:  9 Loss:  1.3481008573767863  Accuracy:  93.70535714285714 Matthews corr.coef:  tensor(0.8636) Cohen Kappa metric on train tensor(0.8607)
Validating.....

 50%|█████     | 10/20 [55:00<55:01, 330.20s/it]
Training....
TARGET:  tensor([1, 1, 2, 3, 2, 2, 3, 2, 0, 3, 2, 2, 4, 3, 0, 0, 2, 3, 1, 1, 3, 2, 0, 2,
        1, 3, 3, 0, 0, 4, 2, 3])
OUTPUT:  tensor([1, 1, 2, 3, 2, 2, 3, 4, 0, 1, 2, 2, 4, 3, 0, 0, 2, 3, 1, 1, 3, 2, 0, 2,
        1, 3, 3, 0, 0, 4, 2, 4])
Accuracy after  50 steps:  0.898125
Precision, recall =  tensor(0.8667) tensor(0.9356)
TARGET:  tensor([4, 1, 4, 1, 0, 0, 1, 4, 4, 1, 1, 4, 2, 1, 3, 0, 4, 2, 1, 4, 2, 2, 4, 1,
        4, 0, 3, 3, 3, 1, 1, 3])
OUTPUT:  tensor([4, 1, 4, 1, 0, 4, 1, 4, 4, 1, 1, 4, 2, 1, 3, 0, 4, 2, 1, 4, 2, 1, 4, 4,
        4, 0, 3, 3, 3, 1, 1, 3])
Accuracy after  100 steps:  0.88375
Precision, recall =  tensor(0.9436) tensor(0.8800)
Epoch:  10 Loss:  1.2088989286816545  Accuracy:  94.41517857142857 Matthews corr.coef:  tensor(0.7769) Cohen Kappa metric on train tensor(0.7705)
Validating.....
Validation accuracy:  0.828125

 55%|█████▌    | 11/20 [1:00:32<49:38, 330.93s/it]
TARGET:  tensor([2, 4, 0, 2, 4, 1, 0, 1, 2, 3, 1, 4, 4, 1, 3, 1, 4, 4, 4, 4, 2, 2, 1, 1,
        4, 2, 0, 3, 2, 2, 1, 3])
OUTPUT:  tensor([2, 4, 0, 2, 4, 1, 0, 1, 2, 3, 1, 1, 4, 1, 3, 1, 4, 4, 4, 4, 2, 2, 1, 0,
        3, 2, 0, 3, 2, 2, 1, 3])
Accuracy after  50 steps:  0.90875
Precision, recall =  tensor(0.8850) tensor(0.9306)
TARGET:  tensor([0, 3, 3, 0, 2, 1, 2, 3, 4, 1, 0, 3, 4, 4, 0, 0, 2, 1, 1, 2, 2, 4, 0, 4,
        4, 1, 2, 3, 4, 0, 4, 1])
OUTPUT:  tensor([3, 3, 3, 0, 2, 1, 2, 4, 0, 1, 0, 0, 4, 4, 0, 0, 2, 1, 1, 2, 2, 4, 0, 4,
        4, 1, 2, 4, 4, 0, 4, 1])
Accuracy after  100 steps:  0.893125
Precision, recall =  tensor(0.8389) tensor(0.8264)
Epoch:  11 Loss:  1.1995738966257445  Accuracy:  95.40178571428571 Matthews corr.coef:  tensor(0.9565) Cohen Kappa metric on train tensor(0.9550)
Validating.....

 60%|██████    | 12/20 [1:06:04<44:08, 331.02s/it]
Training....
TARGET:  tensor([0, 3, 2, 1, 1, 0, 1, 4, 4, 1, 4, 4, 4, 4, 2, 4, 2, 1, 3, 1, 2, 0, 4, 2,
        4, 1, 0, 3, 3, 4, 1, 0])
OUTPUT:  tensor([0, 3, 2, 1, 1, 0, 3, 4, 0, 3, 4, 4, 4, 4, 2, 4, 4, 1, 3, 1, 2, 0, 4, 2,
        4, 1, 0, 3, 3, 2, 1, 0])
Accuracy after  50 steps:  0.9025
Precision, recall =  tensor(0.8378) tensor(0.8700)
TARGET:  tensor([3, 2, 1, 1, 4, 3, 2, 4, 3, 1, 3, 0, 4, 3, 3, 0, 4, 0, 0, 1, 4, 2, 3, 0,
        0, 1, 4, 3, 1, 4, 1, 4])
OUTPUT:  tensor([3, 2, 1, 1, 4, 1, 4, 4, 3, 1, 3, 0, 4, 3, 3, 0, 4, 0, 0, 3, 4, 4, 2, 0,
        0, 1, 4, 3, 1, 4, 1, 4])
Accuracy after  100 steps:  0.8853125
Precision, recall =  tensor(0.8029) tensor(0.7881)
Epoch:  12 Loss:  1.2134234675405813  Accuracy:  94.61160714285714 Matthews corr.coef:  tensor(0.8663) Cohen Kappa metric on train tensor(0.8650)
Validating.....
Validation accuracy:  0.828125

 65%|██████▌   | 13/20 [1:11:35<38:37, 331.08s/it]
TARGET:  tensor([3, 1, 1, 4, 1, 3, 0, 3, 4, 4, 4, 0, 4, 2, 2, 2, 4, 2, 2, 4, 0, 3, 2, 1,
        2, 1, 4, 4, 1, 1, 1, 2])
OUTPUT:  tensor([3, 1, 1, 4, 1, 3, 0, 3, 2, 4, 1, 0, 4, 2, 2, 2, 4, 2, 2, 4, 0, 3, 2, 1,
        2, 0, 4, 4, 1, 1, 1, 2])
Accuracy after  50 steps:  0.893125
Precision, recall =  tensor(0.9028) tensor(0.9306)
TARGET:  tensor([3, 1, 1, 3, 3, 2, 1, 2, 3, 0, 3, 0, 2, 2, 3, 0, 4, 4, 3, 4, 1, 3, 0, 4,
        4, 2, 4, 4, 2, 4, 2, 2])
OUTPUT:  tensor([1, 1, 1, 3, 3, 2, 1, 4, 0, 0, 3, 0, 2, 2, 3, 0, 4, 4, 3, 4, 1, 3, 0, 4,
        4, 2, 4, 4, 2, 4, 2, 2])
Accuracy after  100 steps:  0.88875
Precision, recall =  tensor(0.8978) tensor(0.9250)
Epoch:  13 Loss:  1.187923840513187  Accuracy:  94.90178571428571 Matthews corr.coef:  tensor(0.9552) Cohen Kappa metric on train tensor(0.9536)
Validating.....

 70%|███████   | 14/20 [1:17:06<33:05, 331.00s/it]
Training....
TARGET:  tensor([2, 3, 4, 4, 3, 2, 1, 2, 1, 3, 1, 4, 0, 2, 1, 4, 4, 0, 0, 4, 4, 1, 3, 1,
        2, 4, 3, 1, 4, 0, 4, 4])
OUTPUT:  tensor([2, 3, 4, 4, 3, 2, 1, 2, 1, 3, 1, 4, 0, 2, 1, 4, 4, 1, 0, 4, 0, 1, 3, 1,
        2, 1, 3, 1, 4, 0, 2, 2])
Accuracy after  50 steps:  0.894375
Precision, recall =  tensor(0.8484) tensor(0.8773)
TARGET:  tensor([1, 2, 3, 2, 0, 4, 3, 0, 0, 1, 0, 0, 1, 2, 0, 4, 2, 4, 2, 3, 0, 0, 0, 0,
        3, 4, 1, 0, 3, 0, 3, 0])
OUTPUT:  tensor([1, 4, 3, 2, 0, 4, 3, 3, 0, 1, 0, 0, 1, 2, 0, 4, 2, 4, 2, 3, 1, 0, 1, 4,
        3, 4, 1, 0, 2, 0, 3, 0])
Accuracy after  100 steps:  0.8840625
Precision, recall =  tensor(0.7933) tensor(0.8651)
Epoch:  14 Loss:  1.1894010294927284  Accuracy:  94.62053571428571 Matthews corr.coef:  tensor(0.9560) Cohen Kappa metric on train tensor(0.9545)
Validating.....

 75%|███████▌  | 15/20 [1:22:37<27:34, 330.95s/it]
Training....
TARGET:  tensor([3, 4, 3, 1, 1, 4, 2, 4, 1, 0, 2, 0, 2, 1, 1, 4, 4, 1, 3, 4, 4, 4, 4, 4,
        3, 4, 1, 4, 4, 3, 1, 4])
OUTPUT:  tensor([3, 4, 3, 1, 1, 4, 2, 4, 1, 0, 2, 1, 2, 1, 1, 4, 4, 1, 3, 2, 3, 4, 4, 4,
        3, 4, 1, 4, 4, 3, 1, 4])
Accuracy after  50 steps:  0.905
Precision, recall =  tensor(0.8944) tensor(0.8714)
TARGET:  tensor([4, 2, 1, 4, 2, 3, 0, 2, 0, 3, 0, 3, 1, 3, 4, 1, 1, 4, 4, 4, 1, 2, 1, 0,
        2, 3, 1, 3, 4, 0, 1, 1])
OUTPUT:  tensor([4, 2, 1, 4, 2, 3, 0, 2, 0, 3, 0, 3, 1, 3, 4, 1, 1, 2, 4, 4, 1, 2, 1, 0,
        2, 3, 1, 3, 0, 0, 1, 1])
Accuracy after  100 steps:  0.89125
Precision, recall =  tensor(0.9333) tensor(0.9429)
Epoch:  15 Loss:  1.210853899812459  Accuracy:  95.08928571428571 Matthews corr.coef:  tensor(0.6486) Cohen Kappa metric on train tensor(0.6370)
Validating.....

 80%|████████  | 16/20 [1:28:07<22:03, 330.76s/it]
Training....
TARGET:  tensor([1, 1, 4, 3, 1, 4, 0, 4, 4, 2, 1, 0, 4, 2, 3, 1, 2, 1, 2, 3, 1, 1, 3, 3,
        2, 2, 4, 0, 2, 1, 2, 1])
OUTPUT:  tensor([1, 1, 3, 3, 1, 4, 0, 4, 2, 0, 1, 0, 4, 2, 3, 1, 2, 1, 2, 3, 1, 1, 3, 3,
        2, 2, 4, 0, 4, 1, 2, 1])
Accuracy after  50 steps:  0.896875
Precision, recall =  tensor(0.8481) tensor(0.8833)
TARGET:  tensor([2, 2, 1, 0, 1, 2, 0, 4, 2, 0, 4, 1, 2, 4, 4, 4, 1, 1, 1, 3, 0, 0, 3, 0,
        4, 2, 3, 4, 0, 4, 1, 4])
OUTPUT:  tensor([2, 2, 1, 0, 1, 2, 0, 4, 2, 0, 4, 1, 2, 1, 4, 4, 1, 1, 1, 3, 0, 0, 3, 0,
        4, 2, 3, 3, 0, 3, 1, 2])
Accuracy after  100 steps:  0.885625
Precision, recall =  tensor(0.8664) tensor(0.9111)
Epoch:  16 Loss:  1.2335589545712407  Accuracy:  94.64732142857143 Matthews corr.coef:  tensor(0.9145) Cohen Kappa metric on train tensor(0.9101)
Validating.....

 85%|████████▌ | 17/20 [1:33:38<16:32, 330.83s/it]
Training....
TARGET:  tensor([0, 1, 3, 0, 1, 4, 3, 0, 1, 2, 3, 1, 1, 2, 3, 3, 4, 1, 0, 0, 4, 1, 2, 4,
        1, 4, 4, 2, 1, 4, 4, 1])
OUTPUT:  tensor([0, 3, 3, 0, 1, 4, 3, 0, 1, 2, 3, 1, 1, 2, 3, 3, 4, 1, 0, 0, 2, 1, 2, 2,
        1, 4, 4, 2, 1, 4, 4, 1])
Accuracy after  50 steps:  0.913125
Precision, recall =  tensor(0.9000) tensor(0.9300)
TARGET:  tensor([0, 3, 1, 3, 4, 3, 1, 3, 3, 2, 4, 1, 1, 0, 2, 2, 3, 4, 1, 1, 2, 3, 1, 0,
        2, 4, 3, 4, 3, 2, 4, 3])
OUTPUT:  tensor([0, 3, 1, 0, 4, 3, 1, 3, 3, 2, 4, 1, 1, 0, 0, 4, 3, 2, 1, 1, 2, 3, 1, 0,
        2, 4, 3, 4, 3, 2, 4, 3])
Accuracy after  100 steps:  0.8928125
Precision, recall =  tensor(0.8467) tensor(0.8800)
Epoch:  17 Loss:  1.2192161910601758  Accuracy:  95.48214285714286 Matthews corr.coef:  tensor(0.8306) Cohen Kappa metric on train tensor(0.8170)
Validating.....
Validation accuracy:  0.828125

 90%|█████████ | 18/20 [1:39:09<11:01, 330.92s/it]
TARGET:  tensor([1, 1, 3, 4, 4, 0, 4, 0, 1, 2, 2, 4, 1, 2, 4, 4, 0, 1, 1, 2, 4, 4, 0, 4,
        3, 1, 3, 4, 2, 4, 4, 2])
OUTPUT:  tensor([1, 1, 3, 4, 4, 0, 1, 0, 1, 2, 2, 4, 1, 2, 4, 4, 0, 1, 1, 2, 4, 4, 0, 4,
        3, 1, 3, 4, 2, 4, 4, 2])
Accuracy after  50 steps:  0.898125
Precision, recall =  tensor(0.9750) tensor(0.9833)
TARGET:  tensor([1, 4, 4, 1, 4, 1, 3, 2, 0, 4, 0, 1, 4, 2, 1, 2, 1, 2, 1, 1, 3, 0, 3, 4,
        1, 1, 3, 4, 4, 0, 2, 2])
OUTPUT:  tensor([1, 4, 4, 1, 4, 1, 3, 2, 0, 2, 0, 1, 4, 2, 1, 2, 4, 2, 1, 1, 3, 0, 3, 4,
        0, 1, 3, 4, 4, 0, 2, 2])
Accuracy after  100 steps:  0.891875
Precision, recall =  tensor(0.9064) tensor(0.9350)
Epoch:  18 Loss:  1.3480417372193187  Accuracy:  95.04464285714286 Matthews corr.coef:  tensor(0.8250) Cohen Kappa metric on train tensor(0.8196)
Validating.....

 95%|█████████▌| 19/20 [1:44:39<05:30, 330.74s/it]
Training....
TARGET:  tensor([4, 2, 1, 2, 0, 1, 1, 1, 4, 1, 4, 2, 1, 1, 4, 2, 2, 3, 4, 3, 2, 4, 2, 4,
        1, 1, 2, 0, 0, 0, 2, 3])
OUTPUT:  tensor([4, 2, 1, 2, 0, 1, 1, 1, 4, 1, 4, 2, 1, 1, 4, 2, 2, 3, 4, 3, 2, 4, 2, 4,
        1, 1, 2, 0, 0, 2, 0, 3])
Accuracy after  50 steps:  0.89875
Precision, recall =  tensor(0.9278) tensor(0.9278)
TARGET:  tensor([0, 2, 1, 1, 4, 1, 2, 4, 1, 2, 3, 3, 4, 3, 2, 1, 1, 4, 2, 1, 2, 0, 3, 0,
        0, 3, 4, 2, 1, 0, 1, 3])
OUTPUT:  tensor([0, 4, 1, 1, 4, 1, 2, 4, 1, 2, 3, 3, 4, 3, 0, 1, 1, 4, 2, 1, 2, 4, 3, 1,
        1, 3, 4, 2, 1, 0, 1, 3])
Accuracy after  100 steps:  0.8846875
Precision, recall =  tensor(0.8398) tensor(0.8229)
Epoch:  19 Loss:  1.2613357033613803  Accuracy:  94.70535714285714 Matthews corr.coef:  tensor(0.8634) Cohen Kappa metric on train tensor(0.8605)
Validating.....

100%|██████████| 20/20 [1:50:11<00:00, 330.57s/it]