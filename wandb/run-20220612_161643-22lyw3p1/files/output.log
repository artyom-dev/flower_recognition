
  0%|          | 0/20 [00:00<?, ?it/s]
Inception3(
  (Conv2d_1a_3x3): BasicConv2d(
    (conv): Conv2d(3, 32, kernel_size=(3, 3), stride=(2, 2), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2a_3x3): BasicConv2d(
    (conv): Conv2d(32, 32, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_2b_3x3): BasicConv2d(
    (conv): Conv2d(32, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
    (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool1): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Conv2d_3b_1x1): BasicConv2d(
    (conv): Conv2d(64, 80, kernel_size=(1, 1), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(80, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (Conv2d_4a_3x3): BasicConv2d(
    (conv): Conv2d(80, 192, kernel_size=(3, 3), stride=(1, 1), bias=False)
    (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
  )
  (maxpool2): MaxPool2d(kernel_size=3, stride=2, padding=0, dilation=1, ceil_mode=False)
  (Mixed_5b): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(192, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(192, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(192, 32, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(32, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5c): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(256, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_5d): InceptionA(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_1): BasicConv2d(
      (conv): Conv2d(288, 48, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(48, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch5x5_2): BasicConv2d(
      (conv): Conv2d(48, 64, kernel_size=(5, 5), stride=(1, 1), padding=(2, 2), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6a): InceptionB(
    (branch3x3): BasicConv2d(
      (conv): Conv2d(288, 384, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(288, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(64, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(64, 96, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3): BasicConv2d(
      (conv): Conv2d(96, 96, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(96, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6b): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(128, 128, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(128, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(128, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6c): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6d): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 160, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(160, 160, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(160, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(160, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_6e): InceptionC(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7dbl_5): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (AuxLogits): None
  (Mixed_7a): InceptionD(
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2): BasicConv2d(
      (conv): Conv2d(192, 320, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_1): BasicConv2d(
      (conv): Conv2d(768, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_2): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(1, 7), stride=(1, 1), padding=(0, 3), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_3): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(7, 1), stride=(1, 1), padding=(3, 0), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch7x7x3_4): BasicConv2d(
      (conv): Conv2d(192, 192, kernel_size=(3, 3), stride=(2, 2), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7b): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(1280, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(1280, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(1280, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(1280, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (Mixed_7c): InceptionE(
    (branch1x1): BasicConv2d(
      (conv): Conv2d(2048, 320, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(320, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_1): BasicConv2d(
      (conv): Conv2d(2048, 384, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3_2b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_1): BasicConv2d(
      (conv): Conv2d(2048, 448, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(448, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_2): BasicConv2d(
      (conv): Conv2d(448, 384, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3a): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(1, 3), stride=(1, 1), padding=(0, 1), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch3x3dbl_3b): BasicConv2d(
      (conv): Conv2d(384, 384, kernel_size=(3, 1), stride=(1, 1), padding=(1, 0), bias=False)
      (bn): BatchNorm2d(384, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
    (branch_pool): BasicConv2d(
      (conv): Conv2d(2048, 192, kernel_size=(1, 1), stride=(1, 1), bias=False)
      (bn): BatchNorm2d(192, eps=0.001, momentum=0.1, affine=True, track_running_stats=True)
    )
  )
  (avgpool): AdaptiveAvgPool2d(output_size=(1, 1))
  (dropout): Dropout(p=0.5, inplace=False)
  (fc): Linear(in_features=2048, out_features=5, bias=True)
)
Training....
TARGET:  tensor([3, 2, 4, 4, 3, 4, 1, 3, 4, 1, 0, 1, 3, 0, 3, 2, 0, 1, 4, 2, 2, 1, 0, 4,
        0, 3, 4, 4, 3, 1, 4, 1])
OUTPUT:  tensor([0, 0, 3, 2, 3, 4, 3, 3, 0, 1, 3, 3, 3, 0, 0, 0, 0, 2, 2, 0, 2, 3, 0, 4,
        0, 3, 4, 4, 3, 0, 2, 0])
Accuracy after  50 steps:  0.545625
Precision, recall =  tensor(0.6067) tensor(0.4703)
TARGET:  tensor([4, 4, 1, 1, 2, 2, 1, 4, 4, 4, 0, 1, 4, 1, 4, 3, 4, 2, 2, 4, 3, 3, 0, 1,
        2, 3, 3, 4, 3, 0, 4, 1])
OUTPUT:  tensor([2, 4, 1, 1, 2, 2, 1, 4, 4, 4, 0, 1, 2, 1, 4, 3, 4, 4, 2, 4, 3, 3, 0, 1,
        4, 2, 3, 4, 3, 0, 4, 1])
Accuracy after  100 steps:  0.6190625
Precision, recall =  tensor(0.8636) tensor(0.8503)
Epoch:  0 Loss:  3.4012952705224353  Accuracy:  66.675 Matthews corr.coef:  tensor(0.7486) Cohen Kappa metric on train tensor(0.7410)
  0%|          | 0/20 [00:00<?, ?it/s]C:\Users\USER\AppData\Local\Temp\ipykernel_7952\3234579611.py:77: UserWarning: Implicit dimension choice for softmax has been deprecated. Change the call to include dim=X as an argument.
  op = F.softmax(inception.forward(inp))
Validation accuracy:  0.7289053166069295
Training....
  5%|▌         | 1/20 [05:48<1:50:12, 348.03s/it]
TARGET:  tensor([1, 2, 3, 2, 2, 0, 4, 3, 4, 2, 4, 1, 2, 2, 4, 1, 1, 2, 4, 2, 1, 3, 4, 4,
        2, 2, 3, 3, 4, 1, 3, 0])
OUTPUT:  tensor([1, 2, 3, 2, 2, 0, 4, 3, 4, 4, 0, 3, 3, 2, 4, 1, 1, 0, 1, 3, 1, 3, 4, 4,
        4, 2, 3, 3, 4, 1, 3, 0])
Accuracy after  50 steps:  0.720625
Precision, recall =  tensor(0.7500) tensor(0.8167)
TARGET:  tensor([1, 2, 4, 1, 2, 3, 3, 3, 0, 4, 1, 2, 0, 4, 2, 3, 2, 4, 0, 3, 1, 1, 2, 3,
        1, 2, 3, 2, 1, 3, 2, 2])
OUTPUT:  tensor([1, 4, 2, 0, 0, 4, 3, 0, 0, 0, 1, 4, 0, 4, 2, 0, 2, 0, 0, 0, 1, 1, 4, 1,
        1, 2, 3, 2, 1, 3, 2, 2])
Accuracy after  100 steps:  0.6946875
Precision, recall =  tensor(0.6429) tensor(0.6164)
Epoch:  1 Loss:  3.0386732266594967  Accuracy:  74.50625 Matthews corr.coef:  tensor(0.5311) Cohen Kappa metric on train tensor(0.5055)
Validating.....
Validation accuracy:  0.8064889486260454

 10%|█         | 2/20 [11:38<1:44:50, 349.45s/it]
TARGET:  tensor([1, 2, 2, 3, 4, 0, 0, 2, 1, 4, 0, 1, 4, 0, 1, 1, 2, 1, 1, 3, 4, 0, 1, 1,
        4, 0, 2, 3, 1, 4, 1, 0])
OUTPUT:  tensor([1, 3, 2, 2, 1, 0, 0, 2, 1, 4, 1, 1, 2, 0, 1, 1, 2, 1, 1, 3, 4, 0, 1, 1,
        4, 1, 2, 3, 1, 4, 1, 0])
Accuracy after  50 steps:  0.714375
Precision, recall =  tensor(0.8238) tensor(0.7695)
TARGET:  tensor([1, 1, 4, 4, 4, 1, 0, 2, 1, 1, 4, 3, 4, 2, 0, 0, 4, 2, 4, 4, 3, 1, 1, 4,
        4, 2, 3, 2, 3, 1, 0, 4])
OUTPUT:  tensor([1, 1, 4, 2, 3, 1, 0, 2, 3, 1, 4, 1, 4, 1, 4, 0, 2, 2, 1, 3, 3, 1, 1, 4,
        2, 2, 3, 2, 1, 1, 0, 1])
Accuracy after  100 steps:  0.71625
Precision, recall =  tensor(0.6710) tensor(0.6577)
Epoch:  2 Loss:  3.003480976509551  Accuracy:  76.41041666666666 Matthews corr.coef:  tensor(0.4799) Cohen Kappa metric on train tensor(0.4613)
Validating.....
Validation accuracy:  0.8124253285543608

 15%|█▌        | 3/20 [17:30<1:39:17, 350.46s/it]
TARGET:  tensor([1, 0, 0, 3, 4, 1, 3, 0, 3, 1, 3, 0, 2, 3, 4, 2, 0, 3, 2, 0, 0, 3, 0, 3,
        0, 4, 1, 2, 2, 0, 0, 2])
OUTPUT:  tensor([1, 0, 3, 3, 4, 1, 3, 0, 3, 2, 3, 0, 2, 3, 4, 2, 2, 3, 2, 1, 0, 4, 1, 2,
        0, 4, 1, 2, 2, 0, 1, 2])
Accuracy after  50 steps:  0.721875
Precision, recall =  tensor(0.7548) tensor(0.8091)
TARGET:  tensor([4, 1, 1, 2, 1, 2, 1, 4, 1, 2, 4, 3, 2, 1, 4, 4, 0, 2, 2, 0, 4, 0, 4, 3,
        4, 3, 2, 3, 4, 4, 0, 4])
OUTPUT:  tensor([4, 1, 3, 2, 1, 2, 1, 4, 1, 2, 4, 3, 2, 1, 4, 4, 3, 2, 2, 0, 2, 1, 1, 3,
        4, 0, 2, 3, 2, 1, 0, 4])
Accuracy after  100 steps:  0.716875
Precision, recall =  tensor(0.7339) tensor(0.7439)
Epoch:  3 Loss:  3.0740186500673494  Accuracy:  76.75416666666666 Matthews corr.coef:  tensor(0.4662) Cohen Kappa metric on train tensor(0.4484)
Validating.....
Validation accuracy:  0.8227673237753883

 20%|██        | 4/20 [23:23<1:33:43, 351.49s/it]
TARGET:  tensor([4, 0, 1, 2, 0, 4, 3, 4, 3, 3, 0, 4, 4, 2, 1, 3, 4, 4, 3, 3, 0, 4, 4, 2,
        4, 3, 4, 3, 0, 4, 3, 4])
OUTPUT:  tensor([2, 1, 0, 2, 0, 4, 0, 2, 3, 0, 0, 4, 1, 0, 1, 3, 0, 4, 3, 0, 0, 0, 4, 2,
        4, 0, 4, 3, 0, 4, 3, 1])
Accuracy after  50 steps:  0.730625
Precision, recall =  tensor(0.6167) tensor(0.6121)
TARGET:  tensor([0, 4, 4, 4, 1, 1, 1, 1, 1, 3, 3, 3, 0, 4, 0, 0, 3, 2, 3, 1, 0, 0, 2, 0,
        1, 4, 4, 4, 4, 2, 4, 1])
OUTPUT:  tensor([0, 4, 4, 4, 1, 1, 1, 1, 1, 3, 3, 4, 4, 4, 4, 0, 3, 2, 3, 0, 0, 0, 2, 0,
        1, 2, 2, 2, 4, 2, 4, 1])
Accuracy after  100 steps:  0.726875
Precision, recall =  tensor(0.8000) tensor(0.8112)
Epoch:  4 Loss:  2.8409604653095206  Accuracy:  77.94583333333334 Matthews corr.coef:  tensor(0.5354) Cohen Kappa metric on train tensor(0.5292)
Validating.....
Validation accuracy:  0.7948775388291517

 25%|██▌       | 5/20 [29:19<1:28:20, 353.38s/it]
TARGET:  tensor([4, 4, 2, 2, 4, 2, 0, 2, 3, 0, 3, 4, 0, 4, 0, 2, 0, 2, 1, 1, 4, 1, 0, 2,
        2, 1, 1, 2, 0, 4, 3, 2])
OUTPUT:  tensor([4, 0, 2, 2, 4, 2, 0, 2, 1, 0, 3, 4, 0, 4, 0, 4, 0, 1, 1, 2, 4, 1, 0, 4,
        2, 1, 3, 4, 2, 0, 3, 2])
Accuracy after  50 steps:  0.73625
Precision, recall =  tensor(0.6783) tensor(0.6876)
TARGET:  tensor([1, 4, 3, 1, 4, 0, 3, 1, 4, 4, 1, 1, 4, 4, 2, 1, 0, 0, 2, 2, 0, 4, 0, 4,
        0, 2, 3, 4, 1, 0, 3, 3])
OUTPUT:  tensor([1, 0, 3, 1, 4, 1, 3, 0, 4, 4, 1, 1, 4, 3, 2, 0, 0, 0, 2, 2, 0, 4, 1, 2,
        0, 2, 0, 4, 1, 0, 3, 3])
Accuracy after  100 steps:  0.7284375
Precision, recall =  tensor(0.7740) tensor(0.7790)
Epoch:  5 Loss:  2.9829404023786386  Accuracy:  78.2375 Matthews corr.coef:  tensor(0.7627) Cohen Kappa metric on train tensor(0.7500)
Validating.....
Validation accuracy:  0.807721027479092

 30%|███       | 6/20 [35:13<1:22:30, 353.58s/it]
TARGET:  tensor([4, 0, 0, 2, 3, 0, 4, 3, 1, 1, 3, 4, 4, 1, 3, 4, 0, 4, 4, 0, 3, 4, 4, 4,
        1, 4, 3, 0, 2, 3, 2, 4])
OUTPUT:  tensor([4, 0, 1, 2, 1, 0, 4, 3, 1, 1, 3, 2, 4, 1, 3, 4, 0, 2, 4, 0, 3, 4, 4, 4,
        1, 3, 3, 3, 2, 3, 2, 4])
Accuracy after  50 steps:  0.751875
Precision, recall =  tensor(0.8033) tensor(0.8548)
TARGET:  tensor([3, 0, 2, 3, 1, 1, 1, 2, 2, 0, 0, 3, 0, 4, 4, 1, 2, 1, 1, 3, 0, 4, 4, 0,
        2, 0, 0, 0, 1, 2, 3, 2])
OUTPUT:  tensor([3, 4, 2, 3, 1, 1, 1, 2, 2, 0, 0, 3, 0, 4, 4, 1, 2, 1, 1, 2, 1, 4, 4, 0,
        2, 0, 0, 0, 4, 0, 4, 2])
Accuracy after  100 steps:  0.74375
Precision, recall =  tensor(0.8321) tensor(0.8184)
Epoch:  6 Loss:  2.851405097420017  Accuracy:  79.70416666666667 Matthews corr.coef:  tensor(0.7145) Cohen Kappa metric on train tensor(0.7034)
Validating.....
Validation accuracy:  0.7808393070489844

 35%|███▌      | 7/20 [41:07<1:16:34, 353.42s/it]
TARGET:  tensor([1, 2, 2, 4, 1, 2, 3, 3, 4, 2, 3, 4, 4, 0, 3, 4, 4, 3, 3, 1, 1, 2, 3, 1,
        0, 2, 0, 1, 2, 1, 4, 3])
OUTPUT:  tensor([1, 2, 2, 4, 1, 2, 3, 1, 4, 4, 1, 4, 2, 0, 3, 4, 4, 1, 3, 1, 1, 2, 4, 1,
        0, 2, 0, 1, 2, 1, 4, 3])
Accuracy after  50 steps:  0.740625
Precision, recall =  tensor(0.8614) tensor(0.8429)
TARGET:  tensor([1, 4, 4, 1, 2, 4, 1, 3, 4, 3, 1, 4, 2, 3, 1, 1, 3, 1, 2, 2, 1, 4, 4, 1,
        4, 2, 0, 1, 4, 4, 4, 2])
OUTPUT:  tensor([1, 4, 4, 0, 2, 0, 0, 3, 3, 1, 1, 4, 2, 3, 1, 1, 1, 3, 2, 2, 0, 4, 3, 1,
        0, 0, 0, 3, 2, 0, 4, 2])
Accuracy after  100 steps:  0.725625
Precision, recall =  tensor(0.6012) tensor(0.6576)
Epoch:  7 Loss:  3.0674549035107095  Accuracy:  77.58333333333333 Matthews corr.coef:  tensor(0.7871) Cohen Kappa metric on train tensor(0.7788)
Validating.....
Validation accuracy:  0.8029793906810035

 40%|████      | 8/20 [47:00<1:10:40, 353.40s/it]
TARGET:  tensor([1, 3, 3, 3, 4, 4, 0, 1, 0, 2, 1, 0, 1, 3, 3, 4, 2, 4, 0, 0, 1, 4, 3, 3,
        4, 2, 1, 4, 4, 2, 4, 2])
OUTPUT:  tensor([0, 2, 3, 1, 2, 2, 0, 0, 0, 2, 3, 0, 1, 3, 3, 3, 2, 4, 0, 0, 1, 4, 3, 2,
        4, 0, 1, 4, 1, 2, 3, 0])
Accuracy after  50 steps:  0.758125
Precision, recall =  tensor(0.6311) tensor(0.6232)
TARGET:  tensor([3, 0, 0, 2, 1, 2, 0, 0, 1, 4, 2, 2, 3, 4, 4, 3, 2, 0, 1, 1, 4, 1, 1, 2,
        2, 2, 2, 4, 2, 4, 0, 3])
OUTPUT:  tensor([0, 4, 1, 2, 1, 2, 0, 0, 1, 4, 2, 2, 3, 4, 1, 3, 1, 0, 1, 1, 4, 1, 1, 0,
        1, 4, 2, 4, 2, 4, 0, 3])
Accuracy after  100 steps:  0.73875
Precision, recall =  tensor(0.7962) tensor(0.7700)
Epoch:  8 Loss:  2.9740437118647  Accuracy:  78.87708333333333 Matthews corr.coef:  tensor(0.4940) Cohen Kappa metric on train tensor(0.4400)
Validating.....
Validation accuracy:  0.8181750298685783

 45%|████▌     | 9/20 [52:53<1:04:47, 353.44s/it]
TARGET:  tensor([4, 2, 0, 1, 4, 4, 3, 0, 3, 3, 0, 0, 0, 1, 1, 3, 2, 0, 4, 2, 4, 4, 0, 3,
        1, 2, 1, 2, 2, 3, 3, 4])
OUTPUT:  tensor([4, 4, 0, 1, 4, 4, 4, 3, 3, 3, 0, 0, 0, 4, 1, 3, 3, 0, 4, 4, 4, 4, 1, 3,
        1, 4, 1, 2, 3, 3, 3, 4])
Accuracy after  50 steps:  0.724375
Precision, recall =  tensor(0.8100) tensor(0.7076)
TARGET:  tensor([2, 0, 1, 2, 0, 3, 4, 0, 1, 3, 4, 4, 1, 4, 0, 3, 3, 4, 1, 4, 3, 1, 1, 0,
        2, 4, 1, 3, 2, 4, 1, 1])
OUTPUT:  tensor([2, 0, 1, 2, 1, 3, 4, 1, 1, 3, 4, 4, 1, 3, 0, 1, 3, 4, 1, 4, 3, 1, 1, 0,
        2, 4, 1, 3, 2, 4, 1, 1])
Accuracy after  100 steps:  0.7325
Precision, recall =  tensor(0.9167) tensor(0.8617)
Epoch:  9 Loss:  3.1514747945591806  Accuracy:  78.42291666666667 Matthews corr.coef:  tensor(0.7003) Cohen Kappa metric on train tensor(0.6983)
Validating.....
 45%|████▌     | 9/20 [52:53<1:04:47, 353.44s/it]C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:285: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  return tensor.shape == torch.Size([0]) or (~torch.isfinite(tensor)).all().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:288: TracerWarning: Converting a tensor to a Python boolean might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  if not torch.isfinite(tensor).all():
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:203: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmin = flat.min().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:204: TracerWarning: Converting a tensor to a Python number might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  tmax = flat.max().item()
C:\Users\USER\anaconda3\lib\site-packages\wandb\wandb_torch.py:239: TracerWarning: Converting a tensor to a Python list might cause the trace to be incorrect. We can't record the data flow of Python values, so this value will be treated as a constant in the future. This means that the trace might not generalize to other inputs!
  {name: wandb.Histogram(np_histogram=(tensor.tolist(), bins.tolist()))},
Training....
 50%|█████     | 10/20 [58:47<58:53, 353.37s/it]
TARGET:  tensor([3, 4, 0, 1, 3, 1, 2, 3, 3, 4, 3, 1, 3, 3, 0, 1, 4, 0, 3, 4, 4, 0, 2, 3,
        1, 1, 1, 4, 3, 1, 2, 2])
OUTPUT:  tensor([1, 4, 0, 1, 1, 1, 2, 3, 1, 4, 1, 1, 2, 4, 0, 1, 4, 0, 4, 4, 4, 0, 2, 1,
        1, 1, 1, 4, 3, 1, 2, 2])
Accuracy after  50 steps:  0.733125
Precision, recall =  tensor(0.8331) tensor(0.8400)
TARGET:  tensor([1, 3, 4, 3, 4, 4, 0, 0, 3, 3, 4, 4, 0, 1, 1, 3, 0, 4, 0, 1, 3, 3, 0, 1,
        1, 4, 2, 3, 0, 0, 1, 1])
OUTPUT:  tensor([4, 0, 4, 3, 4, 4, 0, 4, 3, 3, 2, 4, 0, 4, 1, 3, 0, 4, 0, 1, 2, 0, 0, 1,
        1, 2, 2, 2, 0, 0, 1, 1])
Accuracy after  100 steps:  0.73125
Precision, recall =  tensor(0.7206) tensor(0.7679)
Epoch:  10 Loss:  3.115149659352998  Accuracy:  77.94791666666667 Matthews corr.coef:  tensor(0.5997) Cohen Kappa metric on train tensor(0.5804)
Validating.....

 55%|█████▌    | 11/20 [1:04:40<52:59, 353.31s/it]
Training....
TARGET:  tensor([0, 2, 1, 3, 1, 1, 2, 4, 1, 4, 1, 3, 2, 0, 4, 3, 1, 0, 0, 2, 4, 4, 0, 1,
        2, 3, 4, 3, 3, 2, 4, 4])
OUTPUT:  tensor([0, 2, 1, 3, 3, 4, 2, 2, 1, 4, 1, 3, 4, 0, 4, 3, 1, 0, 0, 3, 4, 2, 0, 1,
        2, 3, 4, 3, 3, 2, 3, 3])
Accuracy after  50 steps:  0.728125
Precision, recall =  tensor(0.7867) tensor(0.7762)
TARGET:  tensor([3, 3, 2, 1, 2, 0, 1, 1, 2, 3, 4, 0, 0, 2, 4, 2, 3, 3, 0, 4, 4, 3, 2, 2,
        1, 4, 4, 0, 0, 3, 1, 1])
OUTPUT:  tensor([4, 3, 3, 1, 2, 0, 1, 1, 3, 3, 4, 3, 3, 2, 4, 2, 3, 4, 0, 4, 4, 3, 2, 2,
        1, 3, 4, 0, 0, 1, 1, 3])
Accuracy after  100 steps:  0.72125
Precision, recall =  tensor(0.7895) tensor(0.7238)
Epoch:  11 Loss:  3.37521537054951  Accuracy:  77.05208333333333 Matthews corr.coef:  tensor(0.7946) Cohen Kappa metric on train tensor(0.7890)
Validating.....
Validation accuracy:  0.82261798088411

 60%|██████    | 12/20 [1:10:33<47:05, 353.15s/it]
TARGET:  tensor([3, 0, 1, 4, 1, 3, 1, 4, 1, 1, 0, 0, 4, 3, 1, 1, 0, 3, 1, 0, 1, 3, 2, 3,
        1, 0, 2, 2, 1, 3, 4, 4])
OUTPUT:  tensor([2, 0, 1, 4, 0, 0, 1, 4, 1, 1, 0, 1, 3, 3, 1, 1, 0, 3, 1, 0, 1, 3, 1, 2,
        1, 2, 2, 2, 1, 3, 4, 4])
Accuracy after  50 steps:  0.75
Precision, recall =  tensor(0.7400) tensor(0.7228)
TARGET:  tensor([0, 4, 3, 4, 4, 1, 3, 0, 4, 1, 2, 2, 4, 2, 4, 1, 0, 3, 4, 2, 0, 3, 0, 4,
        1, 3, 1, 0, 1, 4, 0, 0])
OUTPUT:  tensor([0, 4, 3, 3, 1, 1, 3, 1, 2, 1, 0, 2, 4, 2, 2, 1, 0, 3, 3, 2, 3, 2, 0, 4,
        1, 3, 1, 0, 1, 2, 0, 0])
Accuracy after  100 steps:  0.736875
Precision, recall =  tensor(0.7214) tensor(0.7267)
Epoch:  12 Loss:  3.1123763693496587  Accuracy:  78.53125 Matthews corr.coef:  tensor(0.4496) Cohen Kappa metric on train tensor(0.3919)
Validating.....

 65%|██████▌   | 13/20 [1:16:25<41:11, 353.06s/it]
Training....
TARGET:  tensor([3, 1, 2, 4, 0, 3, 4, 2, 1, 2, 2, 3, 4, 4, 3, 1, 0, 1, 0, 1, 3, 3, 3, 3,
        3, 2, 1, 1, 4, 3, 3, 3])
OUTPUT:  tensor([3, 1, 2, 0, 0, 3, 0, 1, 1, 2, 2, 3, 4, 2, 3, 0, 0, 1, 0, 0, 2, 3, 3, 3,
        2, 2, 1, 1, 4, 2, 3, 2])
Accuracy after  50 steps:  0.7475
Precision, recall =  tensor(0.7413) tensor(0.7162)
TARGET:  tensor([3, 4, 0, 2, 0, 0, 4, 1, 2, 1, 4, 0, 4, 2, 4, 3, 3, 0, 3, 3, 0, 1, 4, 0,
        0, 1, 3, 3, 4, 0, 2, 0])
OUTPUT:  tensor([3, 4, 4, 2, 1, 4, 4, 1, 2, 3, 4, 0, 4, 2, 4, 1, 3, 0, 1, 3, 0, 1, 4, 0,
        0, 1, 1, 3, 4, 0, 2, 0])
Accuracy after  100 steps:  0.731875
Precision, recall =  tensor(0.8013) tensor(0.8043)
Epoch:  13 Loss:  3.2409317356223863  Accuracy:  78.2375 Matthews corr.coef:  tensor(0.7679) Cohen Kappa metric on train tensor(0.7486)
Validating.....

 70%|███████   | 14/20 [1:22:17<35:15, 352.63s/it]
Training....
TARGET:  tensor([0, 4, 0, 4, 0, 3, 2, 4, 4, 3, 1, 3, 1, 1, 3, 4, 3, 3, 4, 1, 1, 2, 1, 1,
        4, 1, 3, 2, 4, 1, 3, 3])
OUTPUT:  tensor([0, 4, 0, 4, 0, 3, 2, 0, 4, 2, 1, 3, 1, 2, 3, 3, 3, 2, 3, 1, 1, 2, 1, 1,
        4, 1, 3, 0, 4, 1, 3, 3])
Accuracy after  50 steps:  0.7275
Precision, recall =  tensor(0.7556) tensor(0.7917)
TARGET:  tensor([3, 1, 2, 3, 0, 3, 2, 3, 4, 1, 3, 4, 2, 3, 4, 4, 3, 4, 1, 3, 4, 0, 2, 0,
        0, 1, 3, 1, 4, 0, 3, 2])
OUTPUT:  tensor([4, 3, 0, 0, 0, 3, 2, 3, 4, 1, 3, 4, 2, 3, 2, 4, 0, 3, 4, 1, 4, 4, 0, 0,
        0, 1, 3, 1, 4, 0, 0, 2])
Accuracy after  100 steps:  0.7240625
Precision, recall =  tensor(0.6567) tensor(0.6429)
Epoch:  14 Loss:  3.2836216223426162  Accuracy:  77.35833333333333 Matthews corr.coef:  tensor(0.6827) Cohen Kappa metric on train tensor(0.6615)
Validating.....

 75%|███████▌  | 15/20 [1:28:26<29:47, 357.45s/it]
Training....
TARGET:  tensor([3, 3, 2, 4, 0, 1, 2, 2, 4, 1, 0, 0, 1, 4, 3, 2, 4, 0, 3, 3, 0, 0, 0, 4,
        1, 2, 4, 3, 2, 3, 0, 2])
OUTPUT:  tensor([3, 3, 2, 4, 4, 1, 4, 0, 0, 1, 1, 0, 1, 4, 3, 2, 4, 0, 3, 3, 0, 0, 0, 0,
        2, 3, 4, 3, 2, 3, 0, 4])
Accuracy after  50 steps:  0.748125
Precision, recall =  tensor(0.7226) tensor(0.7190)
TARGET:  tensor([1, 4, 1, 1, 0, 2, 4, 0, 4, 2, 3, 4, 0, 4, 3, 0, 2, 1, 4, 0, 4, 2, 4, 2,
        1, 4, 1, 3, 1, 2, 0, 4])
OUTPUT:  tensor([1, 2, 3, 1, 0, 2, 1, 0, 2, 2, 3, 1, 0, 4, 3, 0, 2, 1, 2, 0, 3, 2, 4, 2,
        1, 1, 1, 3, 1, 2, 0, 4])
Accuracy after  100 steps:  0.74625
Precision, recall =  tensor(0.7867) tensor(0.8314)
Epoch:  15 Loss:  3.1942598149801293  Accuracy:  79.89375 Matthews corr.coef:  tensor(0.7489) Cohen Kappa metric on train tensor(0.7403)
Validating.....

 80%|████████  | 16/20 [1:34:18<23:43, 355.97s/it]
Training....
TARGET:  tensor([4, 0, 3, 0, 3, 1, 4, 4, 2, 3, 4, 0, 3, 2, 1, 3, 1, 2, 1, 3, 2, 1, 4, 2,
        1, 3, 3, 1, 3, 4, 4, 1])
OUTPUT:  tensor([4, 0, 3, 0, 3, 1, 4, 1, 2, 0, 4, 0, 3, 2, 0, 3, 1, 2, 0, 3, 2, 1, 4, 2,
        0, 1, 3, 1, 2, 4, 2, 1])
Accuracy after  50 steps:  0.7575
Precision, recall =  tensor(0.7714) tensor(0.8012)
TARGET:  tensor([0, 3, 1, 3, 1, 2, 1, 3, 1, 2, 1, 2, 2, 1, 2, 2, 4, 4, 0, 0, 1, 2, 1, 4,
        2, 2, 1, 3, 4, 1, 3, 0])
OUTPUT:  tensor([0, 4, 1, 3, 4, 2, 1, 3, 1, 2, 1, 2, 4, 3, 2, 2, 2, 3, 0, 4, 1, 4, 1, 4,
        4, 2, 1, 3, 4, 4, 3, 0])
Accuracy after  100 steps:  0.7453125
Precision, recall =  tensor(0.7492) tensor(0.6833)
Epoch:  16 Loss:  3.1590703234697384  Accuracy:  79.44583333333334 Matthews corr.coef:  tensor(0.5448) Cohen Kappa metric on train tensor(0.5410)
Validating.....

 85%|████████▌ | 17/20 [1:40:06<17:40, 353.49s/it]
Training....
TARGET:  tensor([1, 1, 3, 1, 3, 4, 2, 2, 1, 3, 1, 4, 0, 4, 4, 2, 3, 3, 0, 4, 4, 3, 3, 2,
        1, 2, 3, 4, 3, 4, 4, 1])
OUTPUT:  tensor([2, 1, 3, 1, 2, 4, 2, 2, 1, 2, 1, 4, 2, 4, 2, 2, 3, 3, 0, 4, 4, 3, 0, 3,
        0, 2, 3, 0, 3, 4, 4, 1])
Accuracy after  50 steps:  0.756875
Precision, recall =  tensor(0.7103) tensor(0.6917)
TARGET:  tensor([0, 4, 3, 0, 1, 1, 3, 3, 4, 1, 4, 1, 4, 1, 4, 1, 4, 4, 0, 1, 1, 1, 4, 4,
        2, 1, 1, 1, 1, 4, 1, 4])
OUTPUT:  tensor([0, 4, 0, 0, 1, 1, 3, 3, 1, 0, 4, 1, 4, 3, 4, 4, 4, 2, 0, 1, 1, 0, 2, 4,
        4, 1, 0, 0, 0, 4, 0, 4])
Accuracy after  100 steps:  0.7446875
Precision, recall =  tensor(0.5248) tensor(0.5645)
Epoch:  17 Loss:  3.3047527206751206  Accuracy:  79.48333333333333 Matthews corr.coef:  tensor(0.6827) Cohen Kappa metric on train tensor(0.6610)
Validating.....

 90%|█████████ | 18/20 [1:45:51<11:42, 351.06s/it]
Training....
TARGET:  tensor([3, 2, 0, 2, 1, 1, 2, 1, 2, 4, 1, 2, 0, 1, 2, 1, 4, 3, 2, 4, 2, 4, 1, 0,
        1, 3, 4, 0, 2, 3, 4, 2])
OUTPUT:  tensor([3, 2, 3, 3, 1, 1, 2, 1, 2, 2, 0, 2, 3, 1, 2, 2, 3, 3, 2, 2, 2, 2, 1, 0,
        2, 3, 4, 0, 2, 3, 3, 2])
Accuracy after  50 steps:  0.721875
Precision, recall =  tensor(0.7508) tensor(0.6383)
TARGET:  tensor([3, 4, 2, 0, 1, 4, 0, 4, 3, 2, 4, 4, 3, 4, 2, 2, 0, 4, 2, 2, 1, 2, 3, 4,
        4, 1, 1, 4, 1, 0, 2, 4])
OUTPUT:  tensor([3, 4, 2, 0, 4, 2, 0, 0, 1, 3, 4, 2, 0, 4, 2, 2, 0, 0, 2, 3, 1, 2, 3, 4,
        4, 1, 1, 4, 1, 0, 2, 4])
Accuracy after  100 steps:  0.7190625
Precision, recall =  tensor(0.6993) tensor(0.7373)
Epoch:  18 Loss:  3.717212845074634  Accuracy:  76.825 Matthews corr.coef:  tensor(0.6339) Cohen Kappa metric on train tensor(0.6224)
Validating.....

 95%|█████████▌| 19/20 [1:51:39<05:50, 350.16s/it]
Training....
TARGET:  tensor([2, 0, 1, 3, 2, 3, 0, 2, 1, 4, 4, 3, 1, 4, 1, 1, 4, 4, 4, 2, 4, 0, 0, 3,
        4, 2, 1, 1, 2, 3, 2, 4])
OUTPUT:  tensor([2, 0, 1, 4, 2, 4, 4, 4, 1, 0, 4, 2, 1, 4, 1, 1, 4, 4, 4, 4, 4, 0, 4, 3,
        0, 2, 1, 1, 4, 4, 2, 4])
Accuracy after  50 steps:  0.750625
Precision, recall =  tensor(0.7533) tensor(0.6098)
TARGET:  tensor([0, 0, 0, 1, 3, 3, 2, 1, 3, 2, 0, 3, 1, 4, 0, 2, 0, 2, 2, 4, 1, 0, 2, 3,
        4, 4, 1, 3, 4, 2, 2, 0])
OUTPUT:  tensor([1, 1, 0, 1, 3, 1, 4, 1, 3, 2, 3, 3, 1, 4, 0, 1, 0, 2, 4, 3, 1, 1, 2, 1,
        4, 4, 1, 3, 4, 1, 1, 1])
Accuracy after  100 steps:  0.73875
Precision, recall =  tensor(0.7381) tensor(0.6433)
Epoch:  19 Loss:  3.128441729862243  Accuracy:  78.8875 Matthews corr.coef:  tensor(0.6391) Cohen Kappa metric on train tensor(0.6181)
Validating.....

100%|██████████| 20/20 [1:57:26<00:00, 352.33s/it]